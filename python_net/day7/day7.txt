前情回顾

1 进程对象 p
p.name  进程名
p.pid   新进程的PID
p.is_alive()  查看进程状态
p.daemon  

2 自定义进程类
继承Process   重写run

3 进程池   避免大量进程频繁的创建删除
           Pool() 创建进程池
	   apply_async()  添加时间
	   close()  关闭进程池
	   join()  回收进程池
	   map()
4. 进程间通信
   管道 --》 Pipe（）
   消息队列 --》 Queue（） ---》 q
                q.put   q.get  q.full  q.empty
		q.qsize  q.close
   共享内存 --》 Value   Array

***************************************************

4.信号 
  通信原理：一个进程向另外一个进程通过信号的方式传递某种讯息。接收方在接收到信号后作出相应的处理。
  kill  -l   查看信号
  kill  -sig   PID   向一个进程发送信号 
  关于信号
  信号名称 ： 系统定义，名字或者数字
  信号含义 ： 系统定义，信号的作用
  默认处理方法 ：当一个进程接收到信号是，默认产生的效果
                 终止进程 暂停进程  忽略发生	      
  E.G.  
  SIGHUP   断开连接
  SIGINT   ctrl-c
  SIGQUIT  ctrl-\
  SIGTSTP  ctrl-z
  SIGKILL  终止进程且不能被处理
  SIGSTOP  暂停进程且不能被处理
  SIGALRM  时钟信号
  SIGCHLD  子进程状态改变发送给父进程信息号

python信号处理
os.kill(pid,sig)
功能 ： 发送一个信号给某个进程
参数 ： pid  给哪个进程发送信号
        sig  要发送什么信号
signal.alarm(sec)
功能: 设置时钟信号  在一定时间后给自身发送SIGALRM信号，使自身终止
参数： sec  时间（秒）
* 一个进程中只能有一个时钟，后来的时候会覆盖前面的时间

程序的同步执行和异步执行
同步 ：按照顺序逐句执行，一步完成再做下一步
异步 ：程序在执行中利用内核功能帮助完成必要的辅助操作，不影响应用层持续执行
*信号是唯一的异步通信方法

signal.pause()
功能：阻塞进程，等待一个信号

signal.signal(sig,handler)
功能 ：处理信号
参数 ：sig  要处理的信号
       handler  信号处理方法
	     可选值：SIG_DFL  表示使用默认方法处理
	              SIG_IGN  表示忽略这个信号
		            func   传入一个函数表示用指定函数处理               
               自定义函数格式 ： def func(sig,frame)
    			     sig：接收到的信号
    			     frame：信号结构对象
* signal函数也是一个异步处理函数。只要执行了该函数，则进程任意时候接收到相应信号都会处理。
* signal 是不能处理 SIGKILL SIGSTOP的
* 父进程中可以用 signal(SIGCHLD,SIG_IGN)将子进程的退出交给系统处理
* 信号是一种异步的进程间通信方法


5.信号量：
  给定一定的数量，对多个进程可见，并且多个进程根据信号量多少确定不同的行为
  sem = Semaphore(num)   semaphore
  功能 ： 创建信号量对象
  参数 ： 信号量的初始值
  返回 ： 信号量对象

  sem.get_value()  获取当前信号量的值 
  sem.acquire()  将信号量数量减1   当数量为0则阻塞
  sem.release()  将信号量数量加1 


同步互斥机制：
目的：解决对共有资源产生的资源争夺
临界资源：多个进程或者线程都能够操作的资源
临界区：操作临界资源的{代码段}

同步：同步是一种合作关系，为完成某个任务，多进程或者多线程之间形成一种协调，按照约定执行，相互
      告知，共同完成任务。
互斥：互斥是一种制约关系，当一个进程或者线程进入临界区操作资源时采用上锁的方式，阻止其他进程操作。
      直到解锁后才会让出资源


Event 事件
from multiprocessing import  Event
创建事件对象
e = Event()
事件阻塞
e.wait([timeout])
功能：使进程处于阻塞状态，直到事件对象被set

事件设置
e.set()
功能 : 让事件对象变为被设置状态

清除设置
e.clear()
功能 ： 使事件对象清除设置状态

事件判断 判断当前事件对象的状态
e.is_set() 


锁  Lock
multiprocessing --》 Lock
创建对象
lock = Lock()
lock.acquire()  上锁 
lock.release()  解锁
* 如果一个锁对象已经被上锁则再调用acquire会阻塞
with  lock:    上锁
    ....
    ....
               解锁
	

多线程
什么是线程 （thread）
线程也是一种多任务编程方式，可以使用计算机的多核资源。线程被称为轻量级的进程。

线程特征： 
* 一个进程可以包含多个线程
* 线程是计算机{多核}分配的最小单位
* 线程也是一个运行过程，也要消耗计算机资源，多个线程共享共用进程的资源
* 线程的创建删除消耗的资源要远远小于进程
* 多个线程之间独立运行互不干扰
* 线程也有自己的特征属性，比如指令集 TID，线程栈


threading 模块的使用
t = threading.Thread()
功能: 创建线程对象
 参数：name   线程名称 默认Thread-1... 
       target  线程函数
	     args  元组   给线程函数位置传参
	     kwargs  字典  给线程函数键值传参
返回：线程对象
t.start()  启动线程
t.join([timeout])  回收线程

线程对象属性
t.name 线程名称
t.setName()  设置线程名称
t.is_alive()  查看线程状态
threading.currentThread()  获取到当前线程对象
t.daemon 属性：
  默认情况下主线程结束不会影响分支线程执行
  设置为True时主线程退出则分支线程也退出
设置 daemon值
  t.setDaemon(True)
  t.daemon = True 
  查看daemon值
  t.isDaemon()


创建自己的线程类
步骤 ： 
1 继承 Thread
2 加载父类 __init__
3 重写run


线程通信：
  通信方法：多个线程共享进程的空间，所以线程键通信使用{全局变量}完成。
  注意事项：线程间使用全局变量往往要用不互斥机制保证通信安全
线程同步异步互斥方法：
  1.线程的event
    e = threading.Event() 创建事件对象
    e.wait([timeout]) 如果e为设置状态则不阻塞否则阻塞
    e.set() 将e变为设置状态
    e.clear() 清除设置 
  2.线程锁 Lock
    
    锁  Lock
    threading --》 Lock
      创建对象
      lock = threading.Lock()
      lock.acquire()  上锁 
      lock.release()  解锁
      * 如果一个锁对象已经被上锁则再调用acquire会阻塞
      with  lock:    上锁
          ....
          ....
                     解锁

python线程的GIL问题（全局解释器锁）
python --> 支持多线程 --> 同步互斥 --> 加锁--> 超级锁，给解释器加锁-->解释器同一时刻只能解释一个线程
后果：一个解释器同一时刻只能解释执行一个线程，所以导致Python线程效率低下，但是当遇到IO阻塞时线程会主动让出解释器，因此python线程更加适合高延迟的IO程序并发。

解决办法：
*尽量用进程完成并发
*不适用C解释器  C# java
*尽量使用多种方案组合的方式进行并发操作，线程用作高延迟IO


作业：
总结进程线程的差异
1. 复习网络编程 tcp  udp
2. 司机和售票员

* 创建父子进程分别表示司机和售票员
* 当售票员捕捉到SIGINT信号时，给司机发送SIGUSER1信号
  此时司机打印 "老司机开车了" 
  当售票员捕捉到SIGQUIT信号时，给司机发送SIGUSER2信号。此时司机打印 "车速有点快，系好安全带"
  
  当司机捕捉到SIGTSTP信号时，给售票员发送SIGUSER1信号。此时售票员打印 "到站了请下车"

* 到站后 售票员先下车（子进程先退出）然后司机下车
说明：SIGINT SIGOUT SIGTSTP 从键盘发出







