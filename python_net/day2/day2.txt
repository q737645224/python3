前情回顾

1. osi七层模型 ---》 四层  五层
2. 三次握手四次挥手
3. tcp和udp区别

网络概念 ： 主机   端口    ip    协议
        服务端  localhost / 127.0.0.1
	客户端  只是在本机启动客户端 用127.0.0.1访问
	
	服务端  0.0.0.0
	客户端  可以在本机用127.0.0.1 、172.60.50.181
	        访问
		局域网内 用 172.60.50.181 访问
	
	服务端  172.60.50.181
	客户端  局域网内用  172.60.50.181访问
	
套接字 socket

流式套接字  --》 tcp（面对连接---》三次握手，四次挥手）   可靠地  有连接
数据报套接字  --》 udp（面对无连接）  不可靠  无连接
TCP:
  tcp服务端：
  socket  --》 bind((ip,端口))  --》 listen --》 accept()  --》 recv/send --> close
  客户端：
  socket()----> connect() ---->send/recv ----> close()
UDP:
  udp服务端：
  socket --> bind((ip,端口)) --> recvfrom(buttersize)/sendto((ip,端口)) -->close
  udp客户端：
  socket --> recvfrom/sendto()
******************************************************
1.套接字传输注意事项
1. 监听套接字存在客户端即可发起连接，但是最终连接的处理需要accept进行处理
2. 如果连接的另外一段退出，则recv会立即返回空子串不再阻塞。
3. 当连接的另一端退出时，再试图send发送就会产生BrokenPipeError

  recv()  特征
  * 如果连接的另一端断开连接，则recv立即返回空子串
  * recv是从接受缓冲区取出内容，当缓冲区为空则阻塞
  * recv如果一次接受不完缓冲区内容，下次会继续接收

  send() 特征
  * 如果发送的另外一段不存在则会产生Pipe Broken
  * recv是向发送缓冲区发送内容，当缓冲区为满阻塞

2.网络的收发缓冲区
  在内存中开辟的区域，用作发送和接受的缓冲
  作用：
  * 协调数据收发（接受和处理）速度
  * 减少和磁盘的交互

3.tcp粘包
  产生原因： 
  * tcp传输以字节流的方式发送消息，消息之间没有边界
    发送和接收并不能保证每次发送都及时的被接收
  * 发送比接受的速度快：
    1影响：如果每次发送内容表达一个独立的含义此时可能需要处理粘包防止产生歧义
    2处理方法：
        1.每次发送的消息添加结尾标志（人为增加消息边界）
        2.发送数据结构体
        3.协调收发速度，每次发送后都预留接收时间
4.基于UDP编程：
  1.基于UDP的服务端编程  （数据报套接字）
    1. 创建套接字
      sockfd = socket(AF_INET,SOCK_DGRAM)
    2. 绑定地址
      sockfd.bind(（ip,端口）)   对比tcp(s.listen(n)  s.accept())
    3. 消息收发
      1.data,addr = sockfd.recvfrom(buffersize)
        功能： 接受UDP消息
        参数： 每次最多接受消息的大小  字节
        返回值：data 接收到的内容
                addr 消息发送方的地址
        * recvfrom每次接收一个数据报文，如果数据报大小大于buffersize，则丢弃没有收到的内容(对比：tcp 则会继续读取)
      2.sockfd.sendto(data,addr)
        功能： UDP消息发送
        参数： data  要发送的内容   bytes
               addr  目标地址（元组）
        返回：发送字节数    eg.: L = sockfd.sendto(data,addr)
    4. 关闭套接字
      sockfd.close()
  2.基于udp客户端编程
    1.创建套接字 
      socket(AF_INET,SOCK_DGRAM)
    2.消息收发
      recvfrom/sendto(data,(ip,端口))
    3.关闭套接字
      close()

  **cookie ： 
    1.import  sys 
      sys.argv 属性
      作用：获取从命令行参数，得到一个列表  eg.:python3 xxxx.py
      命令本身是：sys.argv[0] 
      后面的参数从argv[1]开始，默认以空格分隔，使用引号引起来的内容算做一个整体
      命令行参数都以字符串放入列表
    2.
      在程序的第一行加
      #!/usr/bin/env python3
      添加程序的执行权限
      chmod 755 file.py
      修改后即可通过 ./file.py 运行程序


5.tcp流式套接字和udp数据报套接字区别:
  1. 流式套接字采用{字节流}方式进行传输，而数据报套接字以{数据报}形式传输数据
  2. tcp套接字会产生{粘包}，udp有{消息边界(buttersize)}不会形成粘包
  3. tcp编程可以保证消息的{完整性}，udp则不能保证
  4. tcp需要进行listen  accept(产生新的套接字) 操作，udp不需要
  5. tcp收发消息使用新的套接字，recv  send  sendall，udp使用 recvfrom，sendto
    补充函数：
    sendall(data)
      功能 ： tcp套接字发送消息
      参数 ： 要发送的内容，bytes格式（同send）
      返回值：如果发送成功返回None  失败产生异常

  要求 ： 能够说出tcp，udp协议的区别和编程实现上的差异


6.soccket模块和套接字属性
  （s为套接字）s = socket(family,type)
  1.套接字属性
    s.family : 获取套接字{地址族} 类型
    s.type :  获取套接字{类型}
  2.套接字属性方法 
    1.s.getsockname()
      功能:获取套接字绑定的{地址}
    2.s.fileno()
      功能:获取套接字的文件描述符
      文件描述符:每一个{}操作系统都会分配一个不同的正整数作为编号与之匹配，该整数即为此IO的文件描述符
      *文件描述符是操作系统识别IO的唯一标志
      sys.stdin   0
      sys.stdout  1
      sys.stderr  2  
    3.s.getpeername()
      功能 ：获取客户端连接{套接字的地址}
    4.s.setsockopt(level,optname,value)
      功能:设置套接字选项，丰富或者修改套接字属性功能
      参数: level   设置选项的类别  SOL_SOCKET
            optname   子类选项
            value    要设置的值
      *如果要设置套接字选项，最好在创建套接字之后立即设置
    5.s.getsockopt(level,optname)
      功能 ： 获取套接字选项值
      参数 ： level   要获取选项的类型   SOL_SOCKET
              option   子类选项
      返回值：获取的值

7.udp套接字应用 ---》 广播（broadcast）
  广播：一点发送，多点接收
  广播地址：一个网段内有一个指定的广播地址，是该网段的最大值  176.136.17.255
  cookie：format{}
  In [3]: s = "{} is a {}".format('Tom','boy')

  In [4]: s
  Out[4]: 'Tom is a boy'

  In [5]: s = "{1} is a {0}".format('Tom','boy')

  In [6]: s
  Out[6]: 'boy is a Tom'

8.tcp套接字应用之http传输
  1.http协议：超文本传输协议，是一个应用层协议
    用途：网页数据的传输
          数据传输方法
          网站中浏览器获取网页的过程
          编写基于http协议的数据传输
    特点 ： 
    1. 应用层协议，传输层使用tcp服务(应，表，会，传，网，链，物)
    2. 简单，灵活，多种语言都有http相关操作接口（可以使用多种编程语言操作）
    3. 无状态的协议，即不记录用户传输的信息
    4. http1.1  支持持久连接
     一端通过http请求的格式发送具体请求内容，另一端接收http请求，按照协议格式解析。获取真实请求后按照http 
  2.http请求（request）
    请求格式：
      1.请求行：具体的请求类别和请求内容
        格式： GET            /            HTTP/1.1
             请求类别     请求内容         协议版本
        请求类别：表示请求的种类
          GET     获取网络资源
          POST    提交一定的附加数据，得到返回结果
          HEAD    获取响应头
          PUT     更新服务器资源
          DELETE  删除服务器资源
          CONNECT  
          TRACE   用于测试
          OPTIONS 获取服务器性能信息
      2.请求头：对请求的{内容具体描述}
        Accept:text/html
        * 每一个键值对占一行，描述了一个特定信息
      空行
      3.请求体：请求参数(get)或者提交具体内容(post)
                get参数或者post提交的内容
  3.http响应 （response）
    响应格式:
    1.响应行:反馈具体的响应情况
      格式：  HTTP/1.1     200        OK
              协议版本   响应码     附加信息
      响应码 ：响应的具体情况  
              1xx  提示信息，表示请求已经接受
              2xx  响应成功
        	    3xx  响应需要重定向
        	    4xx  客户端错误
        	    5xx  服务端错误
      常见响应码
      200    成功
      404    请求内容不存在
      401    没有访问权限
      500    服务器发生未知错误
      503    服务器暂时无法执行	  
    2.响应头：对响应内容的具体描述
      Content-Encoding: gzip
      Content-Type: text/html
      空行
    3.响应体：返回给请求端的{具体内容}

      要求：1.什么是http协议、作用
            2.请求的格式和每一部分的功能
            3.响应的格式和每一部分功能
            4.常见的请求类型和响应码代表什么
             get/post   1xx/2xx/3xx/4xx/5xx
            5.掌握http协议 请求和响应的格式以及每一部分做什么
          http请求：请求行、头、体
      	  http响应：响应行、头、体

作业：通过tcp套接字完成一个文件的发送
      将一个文件从客户端发送给服务端，或者从服务端发送给客户端均可。
      可以是文本，也可以是图片


