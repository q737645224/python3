吕泽
lvze@tedu.cn

3天 网络编程
4.5天 进程线程
1.5  综合
4天 MongoDB
1.25天  正则表达式
2.75天  第二阶段项目

网络编程
1、网络目的：数据的传输
   网络数据传输是一个复杂的过程    (网络干线（高速公路）)
2、ISO ：国际标准化组织
3、OSI 七层模型  --》(作用：) 网络通信标准化流程 
  上层到底层：
    应用层：提供用户服务，具体功能由特定程序规定 (例子：微信、邮箱)
    表示层：数据的压缩(rar,zip)优化 、加密
    会话层：建立应用级连接，选择传输服务(虚拟连接)
    传输层：提供不同的传输服务(视频，音频，文件)，流量控制
    网络层：路由选择，网络互连
    链路层：提供链路交换，具体消息以帧发送，链路连接
    物理层：物理硬件，接口设定，网卡路由交换机等，线路

    osi七层模型优点 ：1.将工作流程标准化
                      2.降低了模块间的耦合度，使每一部分可以单独开发，单独工作。
      将功能分开，降低了网络传输中的耦合性，每一部分完成自己的功能。
      可以在开发和实施的过程中各司其职。
    cookie（编程思想）
    高内聚 ：单个模块功能尽量单一
    低耦合 ：模块之间尽量减少关联和影响

4、四层模型:
  应用层：应用层、表示层、会话层
  传输层
  网络层
  物理链路层：链路层、物理层
5、五层（tcp/ip模型）
  应用层 ： 应用层   表示层  会话层
  传输层 ： 传输层
  网络层 ： 网络层
  链路层 ： 链路层
  物理层 ： 物理层

6、数据传输流程：
  1.发送端由应用层到物理层逐层添加信息头（首部），最终在物理层发送。
  2.中间进过节点（交换机，路由器等）转发，发送到接收端
  3.在接收端根据发送端的每个信息头进行解析，最终消息到应用层展示给用户。


7、协议（网络协议）：在网络通信中，各方必须遵守的规定。
  包括：建立什么样的连接，消息结构，标识代表什么等。

  应用层 ： TFTP   HTTP  DNS   SMTP
  传输层 ： TCP（数据流）   UDP（数据报）
  网络层 ： IP 
  物理层 ： IEEE

8、网络基本概念
  网络主机：在网络中标识一台计算机 HOST
  本地使用："localhost" 表示本台计算机
            '127.0.0.1'
  网络使用：如果想在网络上进行测试
  	        '0.0.0.0'   ''  ifconfig（查询IP地址） '172.60.50.93'（本机的IP）
    cookie 
    查看 IP网络信息
    linux    ifconfig 
    win      ipconfig

  获取计算机名称
  In [2]: socket.gethostname()
  Out[2]: 'tedu'
  获取主机IP
  In [5]: socket.gethostbyname('localhost')
  Out[5]: '127.0.0.1'

9、IP地址：在网络上确定一台主机网络位置的地址
  IPv4 ： 点分十进制    e.g. 192.168.1.2   每一部分取值范围：0-255
          32位二进制表示 
  IPv6 ： 128位二进制  2**128-1
  ping IP地址： 测试和某台网络主机是否联通
  特殊IP
  127.0.0.1     本地测试IP
  0.0.0.0       本地网卡通用IP
  192.168.1.0   表示当前网段IP
  192.168.1.1   表示网关IP
  192.168.1.255 广播地址

10、获取服务主机信息
  In [7]: socket.gethostbyaddr("www.baidu.com")
  Out[7]: ('127.0.0.1', [],   ['119.75.213.61'])
            主机        别名   IP地址
  将ip十进制转化为二进制  套接字（socket)
  In [12]: socket.inet_aton("192.168.1.2")
  Out[12]: b'\xc0\xa8\x01\x02'
  将ip二进制转化为十进制
  In [11]: socket.inet_ntoa(b"\xc0\xa8\x01\x02")
  Out[11]: '192.168.1.2'

11、域名:网络服务器 {IP地址} 的名称  例子：www.baidu.com
    优点：1.方便记忆
          2.名称表达一定的含义
    url:在网络上定位某个资源位置的字串

    网络端口号 ：端口号是网络地址的一部分，在一个系统中，每个网络应用都会有一个唯一的
                端口号，取来区别其他应用，接受发往这个端口的消息。
    在一个操作系统中不同的网络应用监听不同的端口号
    数字范围：1--65535
              1--255 一些中众所周知的通用端口
              256--1023 系统应用端口
              1025--65535 自用端口
              建议使用 > 10000

    测试一个软件端口号
    In [13]: socket.getservbyname('mysql')
                                   软件名
    Out[13]: 3306
             socket.getservbyname

12、网络字节序：数据在网络中的传输格式

13、传输层服务（tcp/udp)
  1、面向连接的传输服务 ---》 基于tcp协议的数据传输
    传输特征：提供可靠的数据传输，可靠性指数据传输过程中无丢失，无失序，无差错，无重复。
    实现手段：数据的传输断开前都需要进行传输和断开的确认
      1.三次握手：tcp传输在数据传输前建立连接的过程
        1. 客户端向服务器发起连接请求
        2. 服务器收到请求后，回复确认消息，表示允许连接
        3. 客户端收到服务器回复，进行最终标志发送确认连接

      2.四次挥手：tcp传输在连接断开前进行断开确认的过程
        1.主动方发送报文，告知被动方要断开连接
        2.被动方收到请求后立即返回报文告知已经准备断开
        3.被动方贮备就绪后再次发送报文告知准备完毕可以断开
        4.主动方发送报文，最终确认断开
    适用情况：文件的上传下载，网络情况良好，需要必须保证可靠性的情况
    比如 ：信息聊天，文件上传下载，邮件，网页获取
  2、面向无连接的传输服务 ---》 udp协议
    传输特征 ：
    * 不保证传输的可靠性
    * 无需建立三次握手和四次挥手的连接断开过程
    * 消息的收发比较自由，不受其他约束
    适用情况 ：网络情况较差，对可靠性要求不高，收发消息的两端不适合建立固定连接
    比如 ：网络视频，群聊，广播发送

14、要求 ：
  1. osi七层模型介绍一下，tcp/ip模型
  2. tcp服务和udp服务有什么区别
  3. 三次握手和四次挥手时什么意思，过程是怎么样的
15、socket套接字编程
  1.目的：根据socket（套接字）模块提供的接口函数，进行组合使用完成
          基于tcp或udp的网络编程。
  2.套接字：完成上述目标的编程手法，编程方案
  3套接字的分类：    stream
    流式套接字（SOCK_STREAM）: 传输层基于tcp(对接）的协议进行通信
    数据报套接字（SOCK_DGRAM）：传输层基于udp(无对接)的协议进行通信
    底层套接字（SOCK_RAM）:访问底层协议的套接字编程
  
  *面向连接的传输--tcp协议--可靠的--流式套接字SOCK_STRESAM
  *面向无连接传输--udp协议--不可靠--数据报接字SOCK_DGRAM

-************************-
1、TCP套接字编程
  1、服务端
    import  socket
    1. 创建套接字   点操作
      sockfd = socket.socket(socket_family = AF_INET,
                            socket_type = SOCK_STREAM,
              	            proto = 0)
    功能：创建一个套接字
    参数：socket_family：选择地址族类型  AF_INET 表示IPv4   AF_INET6  IPv6
          socket_type：  选择套接字类型  SOCK_STREAM 流式   tcp 
                                          SOCK_DGRAM  数据报 udp
          proto:选择子协议类型    通常为0 （表示选择子协议）
    返回值：返回一个套接字对象

    2. 绑定服务端地址IP端口
      sockfd.bind(（Ip,port）)
      功能：绑定IP地址和端口
      参数：元组（ip,port)二元元组，第一项为ip 第二项为端口号
                        e.g. ("192.168.1.2",8888)
      localhost 可以被本机用 127.0.0.1
      127.0.0.1  同上
      192.168.205.127（本机IP） 可以被别人用192.168.205.127访问
      0.0.0.0 可以被别人用192.168.205.127访问
              也可以被自己用127.0.0.1访问
    3. 将套接字设置为可监听（只有TCP才有）
      sockfd.listen(n)
      功能：将套接字设置为监听套接字，并设置监听队列
      参数：n表示监听队列的大小   n为大于0 的正整数
      *一个监听套接字可以连接多个客户端套接字
    4. 等待、处理客户端连接请求
      connfd,addr = sockfd.accept()
      功能： 阻塞等待处理客户端连接
      返回值 ：connfd  一个新的套接字，用于和[指定客户]端通信
                addr    连接的客户端的地址
      * 阻塞函数：程序运行到阻塞函数位置，如果某种{预期条件}没有达成则暂停继续运行，
                 直到条件达成后再继续运行(eg.：input())
    5.消息收发
      data = connfd.recv(buffersize)
      功能 ： 接收对应客户端消息
      参数 ： 每次最多接收的多少字节  bytes
      返回值 ：返回接收到的内容   decode()
      *如果没有消息则会阻塞
      n = connfd.send(data)
      功能 ： 发送消息
      参数 ： 要发送的内容  必须是bytes格式  encode()
      返回值 ：返回实际发送的字节数
      
    6.关闭套接字
      sockfd.close()
      功能 ：关闭套接字，tcp连接断开
      * telnet  ip   port   表示连接tcp服务端

  2、tcp客户端
    1.创建套接字
      socket()
    *必须相同类型的套接字才能通信

    2. 建立连接
      sockfd.connect(servr_addr)
      功能 ： 发起连接请求
      参数 ： 元组，服务器端的地址

    3.消息收发
      send  recv
      * 消息收发要和服务端配合，避免两边都出现recv阻塞

    4.关闭套接字
      close（）

  作业 ： 
  1. 总结口述方案
    ois七层模型和tcp/ip
    三次握手和四次挥手过程
    tcp和udp
  2.将完成的基本tcp_server改写为一个,当客户端输入
    特殊后退出可以继续接受下个客户端请求的程序。
  3.复习
  2. 将tcp服务端和客户端改写为可以循环收发的模式，当发送##时两端都退出
  3. 当客户端退出后，服务端可以继续等待连接其他客户端，进行操作