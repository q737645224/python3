复习：
1. JS引入方式
	1. 元素事件绑定
		<div onclick="">
	2. 文档内嵌
		<script></script>
	3. 外部JS文件
		<script src=""></script>
2. JS 中的变量与常量
	变量 ：
		var 变量名 = 值;
	常量 ：
		const 常量名 = 值;
3. JS 中的数据类型
	number string boolean undefined
4. 数据类型转换
	1. 自动类型转换
		1. 字符串类型与其他类型的数据进行 + 
			表示字符串的拼接
		2. 数字与布尔类型进行 +
			将布尔类型转换为数字
	2. 强制类型转换
		1. toString() 将其他数据类型转换为字符串类型
			变量.toString();
		2. Number()  将其他类型转换为数字
			Number(变量);
			et :
				纯数字字符串或者布尔类型都可以转换为对应的数字 “18” true
				非纯数字字符串在转换时会返回NaN "18a"
		3. parseInt() 可以将字符串中的数字，整数部分解析出来，注意它只对开头数字进行解析
			et :
				parseInt("18a");  -> 18
				parseInt("a18");  -> NaN
				parseInt("19a20"); ->19
				parseInt(35.5);   ->35
		4. parseFloat() 可以解析数字，包含整数和小数部分，只对开头进行解析
5. 数字运算符
	1. + - * \ %
		5 % 2 -> 1
	2. ++  --
		1. 自增和自减运算符都是在变量本身的基础上进行 +1 或 -1 的操作
			a ++; 等价于 a = a + 1;
		2. 如果自增和自减运算符与变量单独结合，做前缀或者做后缀，没有区别
			a++; ++a;
		3. 如果自增和自减运算符与其他的运算符结合使用，
			做前缀时， 先操作变量，后取值
			做后缀时， 先取值，后操作变量
			et :
				var a = 10;
				var r = a ++;  //r=10;a=11;
				r = ++a;  //r=12;a=12;
------------------------------------------------

一 运算符
	1. 数学运算符
	2. 关系运算符（比较运算符）
		>    大于
		>=	 大于等于
		<	 小于
		<=	 小于等于
		==	 相等
		!=	 不等
		===	 恒等
		!==  不恒等
		注意 ：关系运算的结果为布尔类型
		1. 数字与数字比较
			var r = 10 > 5;  // r = true
		2. 数字与字符串进行比较
			首先会自动将字符串转换为数字再进行比较，如果转换成功，按照数字之间的比较进行运算；如果转换失败，会变成数字与 NaN之间的比较，结果永远都为False
			et :
				"10" > 5; // true
				"10a" > 5; //false
				"你好" > 5; //fasle
		3. 字符串之间的比较，进行每位字符Unicode码的比较，
		当前位如果相同，就后移至下一位再次进行比较，
		当前位如果不同，直接出结果
			et :
				"10" > "5"; // false
				"ab" > "ac"; //false
				"张三丰" > "张无忌"; //false
		4. == === / !=  !==
			相等 ：== 用于判断两个值是否相等，在比较时，会自动转换数据类型，只要值相等，结果就为True
				et: 
					"10" == 10; //true
			恒等 ：=== 用于判断两个变量的数据类型和值是否完全相等，不会进行数据类型转换，只有当操作数的数据类型保持一致，值相等，才为True
				et:
					"10" === 10; //false
					"10" === "10" //true
			---------------------------------
			不等 ：!= 在两端值不相等的情况下，返回True
			不恒等 ：!== 两个操作数中，数据类型与值只要有一个不相等，就返回True，否则是False
				et:
					"10" != 10; //false
					"10" != "10"; //false
					"10" !== 10; //true
					"10" !== "10"; //false 
	3. 逻辑运算符
		进行多项比较，并将结果组合为单一的布尔值
		&& ：逻辑与 等同于 python and，左右为表达式，只有两个表达式的结果都为真，逻辑与的结果才为真
		|| ：逻辑或 等同于 python or ，只要有一个条件为真，结果就为真
		！ ：逻辑非 等同于 python not ，对现有条件的结果进行取反操作

		1. 条件1 && 条件2
				条件1		条件2		结果
		---------------------------------------
		取值	true 		true        true
				true 		false       false
				false 		true 		false
				false 		false 		false
		---------------------------------------
		2. 条件1 || 条件2

				条件1		条件2		结果
		---------------------------------------
		取值	true 		true        true
				true 		false       true
				false 		true 		true
				false 		false 		false
		---------------------------------------
		3. !条件
			直接取反
			非真即假，非假即真

		练习 ：
			1. 用户输入年份
				var r = prompt（""）;
				判断是否为闰年，并且在控制台输出结果
				闰年条件 ：不能被100整除但是可以被4整除，
							或者可以被400整除
			2. 用户输入一个字符
				判断
					是数字吗 ？ 结果
					是中文吗 ？ 结果
					是英文吗 ？ 结果
4. 位运算符
	程序中所有的数据在计算机中都是以二进制存储的，位运算，就是对二进制位进行操作	
	1. 按位与 ：&
		将整数转换为二进制形式，每一位都进行与操作
		3   &  5   -> 1
		011 &  101
			et :
				 0 1 1
			   & 1 0 1
			  -------------
			     0 0 1 
		注意 ： 任何数字与 1 进行位与操作，结果为1时，表明操作数为奇数，结果为0，操作数为偶数，所以可以用来判断数字奇偶
			et :
				3 & 1 -> 011 & 001 -> 001
				2 & 1 -> 010 & 001 -> 000
	2. 按位或 ：|
		3 | 5
			011
		|	101
		--------
			111
	3. 按位异或 ：^
		两个数字的二进制位进行比较，相同则为0，不同则为1
		3 ^ 5 -> 6
			011
		^	101
		--------
			110
		注意 ：^ 操作可以在不借助第三方变量的情况下，交换两个变量的值
		et :
			var a = 3,b = 5;
			--------交换a b的值-----
			1. 普通做法
				var c = a;
				a = b;
				b = c;
			2. ^
				a = a ^ b; -> a = 6;
				b = a ^ b; -> 6 ^ 5 ->110 ^ 101 ->011
				a = a ^ b; -> 6 ^ 3 ->110 ^ 011 ->101

5. 三目运算符
	三目运算符，有三个操作数
		类似：
			单目运算符（一元运算符）++ -- ！typeof,只有一个操作数的运算符；
			双目运算符（二元运算符）+ - * / % && || >...有两个操作数的运算符
	语法 ：
		条件表达式 ？表达式1 ：表达式2;
		先判断条件表达式的结果，为真，执行表达式1；为假，执行表达式2
	et :
		var a = 150;
		var res = a > 120? "偏胖，该减肥了" ："正好，不胖不瘦";
		consoole.log(res);
	练习1 ：
		成绩判定
		接收用户输入的分数 score
		score < 60 不及格
		60 <= score <80 及格
		80 <= score <90 良好
		score >= 90     优秀
	练习2：
		BMI 身体指数计算
		要求从弹框接收用户输入的身高
		要求从弹框接收用户输入的体重
		bmi = 体重 / 身高 * 身高;
		bmi < 18.5 偏瘦
		bmi > 23.9 偏胖
		介于二者之间，属于健康
二 流程控制语句
	控制当前代码的执行顺序
	流程语句结构 ：
		1. 顺序结构
		2. 分支结构（选择结构）
		3. 循环结构
	1. 顺序结构
		按照代码书写顺序，从上到下执行
	2. 分支（选择）结构
		1. 作用
			根据条件选择某一段代码执行
		2. if 结构
			1. if语句
				语法 ：
					if (条件){
						//待执行的语句
						//只有条件为真，才执行{}里的语句
					}
				注意 ：
					1. if()后面的{}可以省略，省略之后，只控制该结构下的第一条语句
					2. 条件尽可能是布尔类型的
					3. 任何非0值都为真，0为假，以下情况，条件的结果都为假
						if(0) {}
						if(0.0) {}
						if("") {}
						if(NaN) {}
						if(undefined) {}
						if(null) {}

			2. if - else 结构
				语法 ：
					if(条件){
						//条件为真时要执行的语句
					} else {
						//条件为假时要执行的操作
					}
				et :
					var age = prompt("请输入年龄");
					if(age >= 18){
						console.log("可以一起在网吧开黑");
					} else {
						console.log(未成年人禁止入内);
					}
			3. 多重分支结构
				if(条件1){
					//条件为真时执行
				} else if(条件2){
					//条件1为假，并且条件2为真时执行
				} else if(条件3){
					//条件2为假，条件3为真时执行
				} 
				...
				else{

				}
		练习 ：
			1. 判断成绩等级
			2. 日期计算器
				用户输入 年，月，日，计算当日是该年的第几天
				例如 ：
					用户输入 2018 - 1- 15
					输出 当天是2018年的第15天
					用户输入 2018 - 2- 15
					输出 当天是2018年的第31 + 15天
				注意 ：如果是闰年，2月为29天，总天数+1

				提示 ：
					1. 判断的是月份
					2. 当年是闰年，并且用户输入的月份>2,总天数再+1
		3. switch 语句
			在进行值判断时用的比较多
			语法 ：
				switch (变量) {
					case 值1 :
						//如果变量的值与case给出的值相等，就会执行 ：后面的代码段
						代码块;
						break; //跳出switch语句，不再向后进行匹配，可以省略
					case 值2 ：
						代码块;
						break;
					case 值3 ：
						代码块;
						break;
					...
					default :
						代码块; // 所有case都匹配失败之后执行的默认语句

				}
			注意 ：
				1. 变量与case 值的匹配，是用===恒等判断的，只有数据类型与值都相等才能匹配成功
					var a = 10;
					switch (a) {
						case '10':
							代码块
					}
				2. break 表示跳出switch判断，后面的判断语句不执行
				3. default关键字用于在表达式不匹配前面给出的任何一种情形时，最终执行的操作
			练习 ：
				1. 每周食谱
					弹框输入 1-7 表示星期几
					星期一 ：今天是星期一，吃红烧肉
					...
					星期天 ：今天是星期天，吃红烧鱼
				2. 改写日期计算器
	3. 循环结构
		1. 作用 
			重复执行某段代码
		2. 循环三要素
			循环变量
			循环条件
			循环体
		3. while 循环
			1. 语法：	
				while (循环条件){
					循环体
				}
				et :
					重复输出100次“编程使我快乐”
					//1. 定义循环变量
					var i = 1; //表示循环次数
					while(i <= 100){
						console.log("编程使我快乐");
						//更新循环变量
						i ++;
					}
			2. 循环语句的执行流程
				1. 定义循环变量
				2. 判断循环条件
				3. 条件成立，执行循环体
				4. 更新循环变量 （重点）
				5. 重复2 - 3 - 4...知道循环条件不成立，结束循环
			练习 ：
				1. 打印1-100之间的所有数字
				2. 打印1-100之间所有数字的和
				3. 打印1-100之间所有3的倍数

		4. do-while 循环
			1. 语法
				do{
					循环体
				}while(循环条件);

			2. 执行流程
				1. 定义循环变量
				2. 执行循环体
				3. 更新循环变量
				4. 判断循环条件，条件成立，重复2-3-4，条件不成立，结束循环
			3. while 与 do-while区别：
				while循环先判断循环条件，为真才执行循环体；
				do-while循环不管条件是否成立，先执行循环体，后判断循环条件。即使循环条件不成立，也会执行一遍循环体
				et :
					var i = 101;
					do{
						console.log(i);
						//更新循环变量
						i ++;
					}while(i < 101);
			练习 ：
				1. 循环接收用户输入，并在控制台输出，直到用户输入exit，结束循环
				2. 改版日期计算器









