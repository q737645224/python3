1. for 循环
	1. 语法
	for(1.定义循环变量; 2.判断循环条件; 3.更新循环变量){

			循环体
			
	}
	2. 循环流程
		1. 定义循环变量
		2. 判断循环条件
		3. 条件成立，执行循环体
		4. 更新循环变量
	3. for 循环与 while循环的区别
		1. 相同点 ：执行流程相同
		2. 不同点 ：
			while 循环常用于不确定循环次数的场合
			for   循环常用于确定循环次数的场合
	4. 循环控制
		1. break
			break用在循环体中，表示跳出循环，结束整个循环，并且循环体中break后面的代码都不执行
		2. continue
			continue用在循环体中，表示跳出本次循环，开始下一次循环
	练习 ：
		1. 判断素数（质数）
			素数 ：只能被1和本身整除的数字
			从弹框随意录入数字，判断是否为素数
		2. 在弹框中输入年月日，判断星期几
			已知 ：1990年1月1日是星期一
				解决 ：
					1. 接收年月日，转换为Number
					2. 计算当前日期与1990-01-01之间间隔多少天
						年累加 1990 -> year-1
						当前年中月份的累加
						当前月的天数
					3. 总天数 % 7 
						0 - 6 代表周日 - 周六
	5. 循环的嵌套
		允许在一个循环中嵌套另一个循环
		语法 ：
			for(var i = 1; i <= 9; i ++){  //行

				for(var j = 1; j <= 9; j ++){ //列

				}
			}
		练习 ：
			1. 在控制台输出图案
				*
				**
				***
				****
				*****
			2. 在控制台输出图案
				   *
				  ***
				 *****
				*******
			   *********
			   每行的空格数和星星数
			   思路 ：
			   		行数 i  共5行
			   		每行的空格数 ：
			   			行数   空格数
			   			 1        4
			   			 2        3
			   			 i        5-i
			   		每行的星星数 ：
			   			行数	星星数
			   			 1		  1
			   			 2		  3
			   			 3		  5
			   			 i 		  2*i-1
			   		每一行中，先输出空格，后输出星星

			3. 控制台输出 99 乘法表
2. 函数
	1. 函数，就是一段待执行的代码块
	2. 作用 ：
		实现多条语句的封装
		实现代码复用
	3. 函数使用
		1. 函数的声明
		2. 函数的调用
		注意 ：函数先声明后调用（JS中非强制）
	4. 语法 ：
		1. 函数声明
			function 函数名 (参数列表) {
				函数体;
				返回值
			}
			1. JS中函数声明使用function关键字
			2. 函数名自定义，遵照变量命名规范，见名知意
			3. 参数列表，参数表示函数体执行所需要的数据，可以为空，为空时()不能省略；多个参数之间使用,隔开
				et :
					function sum (a,b){
						return a + b;
					}
			4. 返回值 使用return关键字，将函数体内部执行的结果传递给外界使用，只能返回一个值，返回值不需要的话，可以省略return
				et :
					function showFn(){
						console.log("hello");
					}
				注意 ：return一定要写在函数体的末尾，return关键字后面的代码都不执行
			5. 匿名函数
				var fn = function (){
					函数体
				};
		2. 函数调用
			语法 ：函数名();
				   函数名(10,20);
				   var res = 函数名(10,20);
			注意 ：
				1. 函数参数分为形参和实参，函数声明时，使用形参，函数调用时，传递实参
					形参 ：代号
					实参 ：具体的数据
					传参的过程，就是给函数中形参变量赋值的过程

				2. 函数如果有返回值，在调用时，需要定义变量接收返回值
			练习 ：
				改版日期计算器
				1. 整体功能封装在一个函数中
				2. 将闰年判断的功能单独封装在一个函数中
					1. 接收参数 （年份）
					2. 返回布尔值表示是否为闰年
				3. 整体功能中涉及闰年判断的部分，都通过函数调用实现
				4. 添加界面元素 按钮 显示 日起计算器，点击时调用函数实现日期计算
	5. 变量的作用域
		1. 变量的作用域指的是变量起作用的范围
		2. 分类 ：
			1. 全局作用域
				处在全局作用域中的变量就是全局变量
					1. 在function之外通过var声明的变量都是全局变量，在任何地方都可以访问
					2. 声明变量时，省略var关键字，一律是全局变量，推荐使用var关键字，不要省略

			2. 局部作用域 （JS中局部作用域指的是函数作用域）
				局部作用域中的变量就叫局部变量
					1. 在函数内部使用var关键字声明的变量都是局部变量，只在当前函数作用域中可以访问，外界无法访问
					2. 局部变量出了函数就不能访问了
			注意 ：
				在函数中访问变量，
					1. 如果当前函数中没有该变量，就访问全局作用域中的变量
					2. 如果当前函数中定义了该变量，全局中也有相同的变量名，函数就近访问变量
3. 数组
	1. Array 数组是一个有序的元素序列，数组中的元素会自动分配下标，从0开始，方便读写
	2. 创建数组
		1. 创建空数组
			var 数组名 = [];
		2. 创建数组的同时初始化元素
			var 数组名 = [元素1,元素2,...];
		3. 创建空数组
			var 数组名 = new Array();
		4. 创建数组并初始化
			var 数组名 = new Array(元素1,元素2,...);
			注意 ：
				var 数组名 = new Array(Num);
				只包含一个数值参数时，表示初始化数组长度
				et :
					var arr = new Array(5);
	3. 数组的使用
		1. 获取数组的长度
			属性 ： length
			使用 ：数组名.length; //获取数组长度
		2. 访问数组元素
			数组中每一个元素都有对应的下标
			元素的下标范围 0 -> length-1
			语法 ：数组名[下标];
		3. 设置数组元素
			语法 ：数组名[下标] = value;
	4. 清空数组中元素
		arr.length = 0;
	5. 循环遍历数组
		//正序
		for(var i = 0; i < arr.length; i ++){
			arr[i];
		}
		//倒序
		for(var i = arr.lenth - 1; i >= 0; i --){
			arr[i];
		}
		练习 ：
			1、
				1. 让用户循环录入数据
				2. 将用户输入的数据存储在一个数组中
				3. 当用户输入exit 表示结束输入
				4. 结束之后输出数组中元素
			2、创建一个包含若干整数的数组，找出其中的最大值并输出
			3、创建一个只包含3个数字的数组，按照从小到大排序之后输出数组
			4、声明一个数组包含若干个数字，从弹框中接收用户输入一个数字，查询数组，如果数组中存在对应的元素，输出其下标，没有提示数据不存在




