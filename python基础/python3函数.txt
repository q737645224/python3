python语言的应用领域：
    系统运维
    网络编程(搜索引擎，爬虫，服务器编程)
    科学计算
    人工智能,机器人
    web 开发
    云计算
    大数据及数据库编程
    教育
    游戏，图像处理
    其它。。。
优缺点:
  优点:
    面向对象(Java, C++, Python, C#, Swift)
    免费
    可移植 (Windows, Linux, Unix, IOS, 安卓)
    可混合编程(C / C++ / Java / .net )
    简单易学易用
    应用领域广泛
    开源
  缺点:
    与 C/C++相比，执行速度不够快
    不能封闭源代码

del 语句删除变量
abs(x) 取x的绝对值
round(number, ndigits=0)  对数值进行'四舍五入',ndigits是小数向右取整的位数，负数表示向左取整
pow(x, y, z=None)  相当于 x ** y 或 x ** y % z
input 基本输入函数 
print 基本输出函数 
int(x)
float(x)
complex(x)  复数 
bool(x)

if 语句
      if 真值表达式:
          语句1
      elif 真值表达式2:
          语句2
      ...
      else:
         语句3

  if-else 条件表达式
    左表达式 if 真值表达式 else 右表达式

str(x)
常用字符串方法：
    s.lower()   将英文字符转换为小写
    s.upper()   将英文字符转换为大写
    s.title()   将首字母大写
    
    s.isdigit() 判断是否为数字
    s.isalpha() 判断是否为字母
    s.islower() 判断字符串是否全是小写
    s.isupper() 判断字符串是否全是大写
    
    s.strip()   返回去掉左右空白字符的字符串
    s.lstrip()  返回去掉左空白字符的字符串
    s.rstrip()  返回去掉右空白字符的字符串
    
    s.count(sub[,start[,end]]) 返回一个字符串的个数
    s.find(sub[,start[,end]])   找到字符串的位置
    s.replace(old,new[,count])  用新的字符串替代旧的字符串
    s.center(width[,fillcher])  字符串居中来满足指定的宽度，fillcher为空的是后默认填充空格

索引 index
  语法:
    字符串[整数表达式]

切片 slice
  作用:
    从一个字符串序列中取出相应的元素重新组成一个字符串序列
  语法:
    字符串序列[(开始索引b):(结束索引e)(:(步长s))]

len(x)   返回序列的长度
max(x)   返回序列的最大值元素
min(x)   返回序列的最小值元素
sum(x)   求和

any(x)   真值测试，任意为真则为真
all(x)   真值测试，所有为真则为真

ord(c)   返回一个字符的Unicode值
chr(i)   返回i这个整数值所对应的字符

bin(i)   将整数转换为二进制字符串
oct(i)   将整数转换为八进制字符串
hex(i)   将整数转换为十六进制字符串

格式化字符串中的占位符和类型码:
  %s     字符串，使用str(obj)转为字符串
  %r     字符串，使用repr(obj) 转为字符串
  %c     整数转为字符串，使用chr(i) 函数
  %d     十进制整数
  %o     八进制整数
  %x     十六进制整数(字符a-f小写)
  %X     十六进制整数(字符A-F大写)
  %e     指数型浮点数(e小写)  如 2.9e+10
  %E     指数型浮点数(E大写)  如 2.9E+10
  %f,%F  浮点十进制形式
  %g,%G  进制进形式浮点或指数浮点自动转换
  %%     等同于一个%字符

占位符和类型码之间的格式语法:
  % [- + 0- 宽度.精度] 类型码
  -   左对齐(默认是右对齐)
  +   显示正号
  0   左侧空白位置补零
  宽度: 整个数据输出的宽度
  精度: 保留小数点后多少位,默认6位
  示例:
    "%10d"  % 123    # '       123'
    "%+10d"  % 123   # '      +123'
    "%-10d"  % 123   # '123       '
    "%10s" % "ABC"   # '       ABC'
    "%05d" % 123     # '00123'
    "%f" % 3.1416926535897932  # '3.141593'
    "%7.2f" % 3.1416926535897932 # '   3.14'

while 语句 
    while 真值表达式:
        语句块1
    else:
        语句块2

for 语句
  for 变量列表 in  可迭代对象:
      语句块1
  else:
      语句块2

range() 函数:用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)
    range(stop)  从零开始，每次生成一个整数后加1操作，直到stop为止(不包含stop)
    range(start, stop[, step]) 从 start开始，每次生成一个整数后移动step,直到stop为止(不包含stop,且step可以是负数)

break 语句
  作用:
    用于循环语句(while, for)中,用来终止当前循环语句的执行
  说明:
    1. 当break语句执行后，此循环语句break之后的语句将不再执行
    2. break 语句通常和 if 语句组合使用
    3. break 语句终止循环时，循环语句else子句的语句将不会执行
    4. break 语句只能终止当前循环语句的执行，如果有循环嵌套时，不会跳出嵌套的外重循环
    5. break 语句只能在循环语句(while或for语句)内部使用

continue语句:
    用于循环语句中(while, for语句),不再执行本次循环内 continue之后的语句，重新开始一次新的循环
    1. 在while语句中执行continue语句，将会直接跳转到 while语句的直值表达式处重新判断循环条件
    2. 在for 语句中，执行continue语句，将会从可迭代对象中取一下元素绑定变量后再次进行循环

list()   生成一个空的列表，等同于 []
  list(iterable)  用可迭代对象创建一个列表

列表的切片
   列表[:]
   列表[::]

列表可以索引赋值与切片赋值

del 语句用于删除列表的元素
      语法:
        del 列表[索引]
        del 列表[切片]

列表的常见方法
    L.index(v)  返回值v对应下标
    L.insert(index, obj)    将某个元素插放到列表中指定的位置
    L.count(x)  返回列表中元素的个数
    L.remove(x) 从列表中删除第一次出现在列表中的值
    L.copy()    复制此列表（只复制一层，不会复制深层对象)
    L.append(x) 向列表中追加单个元素
    L.extend(lst)   向列表追加另一个列表
    L.clear()   清空列表,等同于 L[:] = []
    L.sort(reverse=False)   将列表中的元素进行排序，默认顺序按值的小到大的顺序排列
    L.reverse() 列表的反转，用来改变原列表的先后顺序
    L.pop([index])  删除索引对应的元素，如果不加索引，默认删除最后元素，同时返回删除元素的引用关系

S 代表字符串
  S.split(sep=None)  将字符串使用sep作为分隔符分割S字符串，返回分割后的字符串列表，当不给定参数时，用空白字符作为分隔符分割
  S.join(iterable)   用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串

深拷贝和浅拷贝
浅拷贝 copy.copy(obj)
深拷贝 copy.deepcopy(obj)

列表推导式 [表达式 for 变量 in 可迭代对象 [if 真值表达式]]

tuple() 生成一个空的元祖，等同于()
tuple(iterable) 用可迭代对象生成一个元祖

dict()  生成一个字的字典 等同于 {}
dict(iterable)  用可迭代对象初始化一个字典
dict(**kwargs)  用关键字传参形式创建一个字典
字典推导式 {键表达式: 值表达式 for 变量 in 可迭代对象 if 真值表达式 for 变量2 in  可迭代对象 .... }

集合的构造函数 set
  set()  创建一个空的集合对象(不能用{}创建空集合)
  set(iterable)  用可迭代对象创建一个新的集合对象
集合推导式 {表达式 for 变量 in 可迭代对象 [if 真值表达式]}
  S.add()
  S.remove()
  S.discard() 
  S.clear()
  S.pop()


固定集合的构造函数:
  frozenset()  创建一个空的固定集合
  frozenset(iterable)  用可迭代对象创建固定集合

globals() / locals()函数:
  globals() 返回当前全局作用域内变量的字典
  locals()  返回当前局部作用域内变量的字典

global 语句
    语法:global 变量1, 变量2, ...
    1. 告诉解释执行器 global 语句声明的一个或多个变量，这些变量的作用域为模块级的作用域，也称作全局变量
    2. 全局声明(global)将赋值语句操作的变量映射到模块文件内部的作用域

nonlocal 语句
    语法:nonlocal 变量1, 变量2, ...
    告诉解释执行器，nonlocal声明的变量不是局部变量，也不是全局变量，它是外部嵌套函数内的变量

lambda 表达式 lambda x, y: x + y

eval() / exec() 函数
eval(source, globals=None, local=None)  把一个字符串 srouce 当成一个表达式来执行，返回表达式执行的结果
exec(source, globals=None, locals=None) 把一个字符串source 当成程序来执行

map函数: map(func, *iterables)
filter 函数: ilter(function, iterable)

sorted 函数: sorted(iterable, key=None, reverse=False)
    说明:
        iterable 可迭代对象
        key 函数是用来提供一个值，这个值将做为排序的依据
        reverse 标志用来设置是否降序排序

递归函数 recursion
  函数直接或间接的调用自身  （递推、回归）

闭包 closure:闭包是指引用了此函数外部的变量的函数
    说明:在本质上，闭包是将内部嵌套函数和函数外部的执行环境绑定在一起的对象
    闭包必须满足三个条件:
        1. 必须有一个内嵌函数
        2. 内嵌函数必须引用外部函数中的变量
        3. 外部函数返回值必须是内嵌函数

装饰器 decorator
    装饰器是一个函数，主要作用是用来包装另一个函数或类
    装饰的目的是在不改变原函数名（或类名) 的情况下，改变被包装对象的行为
    函数装饰器:函数装饰器指装饰器传入的是一个函数，返回的也是一个函数
    语法:
    def 装饰器函数名(参数):
        语句块
        return 函数对象

    @装饰器函数名<换行>
    def 函数名(形参列表):
        语句块

import 语句语法：
import 模块名1 [as 模块新名1], 模块名2 [as 模块新名2], ....
from import 语句语法：
from 模块名 import 模块属性名1 [as 属性新名1], 模块属性名2 [as 属性新名2], ....
from 模块名 import * ：将某模块的所有属性导入到当前模块

dir 函数: dir([对象])  返回一个字符串的列表
random 模块：随机数模块

模块的 __doc__ 属性
    此属性用于绑定模块的文档字符串

模块的 __file__属性
  此属性用于记录模块对应的文件路径名

模块的 __name__属性 
  __name__属性 用来记录模块自身名字

模块的 __all__列表
  模块中的 __all__列表是一个用来存放可导出属性的字符串列表

__init__.py 文件
  __init__.py是常规包内必须存在的文件
  __init__.py会在包加载时自动调用
  作用:
    1. 编写此包的内容
    2. 在内部填写文档字符串
    3. 在__init__.py文件内可以加载此包所依懒的一些其它模块


try 语句:
  两种语法:
    try-except语句
    try-finally语句
  
  try-except语句语法:
    try:
        可能触发异常的语句
    except 错误类型1 [as 变量1]:
        异常处理语句1
    except 错误类型2 [as 变量2]:
        异常处理语句2
    except (错误类型3,错误类型4, ....) [as 变量3]
        异常处理语句3
    ...
    except:
        异常处理语句(其它)
    else:
        末发生异常语句
    finally:
        最终语句

  try-except语句说明:
    1. as 子句是用于绑定错误对象的变量,可以省略
    2. except 子句可以有一个或多个,但至少要有一个
    3. else子句最多只能有一个,也可以省略不写
    4. finally子句最多只能有一个,也可以省略不写
    5. else子句的语句将在此try语句没有发生异常时被执行
    6. finally子句的语句在任何情况下都会被执行

try-finally 语句
  语法:
    try:
        可能触发异常的语句
    finally:
        最终语句
  说明:
    1. finally 子句不可以省略
    2. 一定不存在except子句 
  作用:
    通常用try-finally语句来做触发异常时必须要处理的事情
    无论异常是否发生,finally子句都会被执行
  注意:
    try-finally 语句不会改变程序的(正常/异常)状态

raise 语句
  作用:
    触发一个错误,让程序进入异常状态
    发送错误通知给调用者
  语法:
    raise 异常类型
    或
    raise 异常对象

assert 语句(断言语句)
  语法:
    assert 真值表达式, 错误数据(通常是字符串)

  作用:
    当真值表达式为False时,用错误数据创建一个AssertionError类型的错误,并进入异常状态

  等同于:
    if 真值表达式 == False
       raise AssertionError(错误数据)

迭代器函数iter和next
  iter(iterable) 从可迭代对象中返回一个迭代器,iterable 必须是能提供一个迭代器的对象
  next(iterator) 从迭代器iterator中获取下一个记录,如果无法获取下一条记录,则触发StopIteration异常

  说明:
    迭代器只能向前取值,不会后退
    用iter函数可以返回一个 可迭代对象的迭代器
  作用:
    迭代器对象能用next函数获取下一个元素

生成器有两种:
  1. 生成器函数
  2. 生成器表达式

生成器函数的定义
  含有yield语句的函数是生成器函数,此函数被调用将返回一个生成器对象
  yield 翻译为(产生或生成)

yield 语句
  语法:
    yield 表达式(返回的内容)
  说明:
    yield 用于 def 函数中,目的是将此函数作为{生成器函数}使用
    yield 用来生成数据,供迭代器的next(it) 函数使用

生成器函数说明:
  生成器函数的调用将返回一个生成器对象,生成器对象是一个可迭代对象
  在生成器函数调用return 会触发一个StopIteration异常

生成器表达式:
  语法:
    (表达式 for 变量 in 可迭代对象 [if 真值表达式 ])
  说明:
    if 子句可以省略
  作用:
    用推导式的形式创建一个新的生成器
  示例:
    gen = (x ** 2 for x in range(1, 5))
    it = iter(gen)
    next(it)  # 1
    next(it)  # 4
    next(it)  # 9
    next(it)  # 16
    next(it)  # StopIteration

迭代工具函数
  迭代工具函数的作用是 生成一个个性化的可迭代对象

函数:
  zip(iter1[, iter2[, ...]])  返回一个zip对象,此对象用于生成元组,此元组的个数由最小的可迭代对象决定

  enumerate(iterable[, start]) 生成带索引的枚举对象,返回迭代类型为索引-值对(index-value对),默认索引从零开始,也可以用start指定

字节串bytes (也叫字节序列)
  作用:
    存储以字节为单位的数据
    字节串是不可变的字节序列

字节:
  字节是由8个位(bit)组成的数据单位,是计算机进行数据管理的单位
  字节是用 0 ~ 255 范围内的整数表示的

创建空字节串的字面值
   B = b''
   B = b""
   B = b''''''
   B = b""""""

创建非空字节串的字面值
  B = b'ABCD'
  B = b"ABCD"
  B = b'\x41\x42'

字节串的构造函数 bytes
  bytes()  生成一个空的字节串 等同于 b''
  bytes(整数可迭代对象) # 用可迭代对象初始化一个字节串
  bytes(整数n)  生成n个值为0的字节串
  bytes(字符串, encoding='utf-8')  用字符串转为编码生成一个字节串

bytes 的运算:
  + += * *= 
  < <= > >= == !=
  in / not in 
  索引和切片

  len(x)
  max(x)
  min(x)
  sum(x)
  any(x)
  all(x)

bytes 和 str 的区别:
  bytes 存储字节( 通常值在 range(0, 256))
  str 存储unicode字符( 通常值在0~65535)


bytes 与 str 的转换
       编码(encode)
   str ------------> bytes
      b = s.encode(encoding='utf-8')

        解码(decode)
   bytes  ----------> str
      s = b.decode(encoding='utf-8')

字节数组 bytearray
  可变的字节序列

字节数组的构造函数: bytearray
  bytearray()   创建空的字节数组
  bytearray(整数)   用可迭代对象初始化一个字节数组
  bytearray(整型可迭代对象)  生成n个值为0的字节数组
  bytearray(字符串, encoding='utf-8')  用字符串的转换编码生成一个字节数组

bytearray 的运算:
  + += * *= 
  < <= > >= == !=
  in / not in 
  索引和切片
  (字节数组支持索引和切片的赋值操作,规则同列表的索引和切片赋值规则)

  例:
    ba = bytearray(b'aBCDEfG')
    ba[0] = 65
    ba[-2] = 70

bytearray的方法:
  BA.clear() 清空
  BA.append(n) 追加一个字节(n为0~255的整数)
  BA.remove(value) 删除第一个出现的字节,如果没有出现，则触发ValueError错误
  BA.reverse()  字节顺序反转
  BA.decode(encoding='utf-8')  # 解码为字符串
  BA.find(sub[, start[,end]])  # 查找 sub

文件的打开函数
  open(file, mode='rt')  用于打开一个文件，返回此文件流对象,如果打开文件失败，则会触发OSError错误

文件的关闭方法:
  F.close()   # 关闭文件，释放系统资源

文本文件操作：
  操作模式:
     't'
  说明：
  　　1. 默认文件中存储的都为字符数据，在读写过程中会自动进行编解码操作，
  　　2. 文本文件以行为单位进行分隔，在python内部统一用'\n'作用为换行符进行分隔
  　　3. 对文本文件的读写操作需要用字符串(str) 进行数据操作

  各操作系统的换行符
    Linux换行符: '\n'
    Windows 换行符: '\r\n'
    新的Mac OS 换行符: '      \n'

文件流对象是可迭代对象，迭代过程中将以换行符'\n'作为分隔符
　　示例:
    f = open('phonenumber.txt')
    for line in f:
        print(line)  # 打印每一行的数据

标准输入输出文件:
  sys.stdin  　 标准输入文件
                  ctrl+d 输入文件结束符
  sys.stdout    标准输出文件
  sys.stderr    标准错误输出文件
  模块名：sys 
  注:
    标准文件不需要打开和关闭就可以使用  

二进制文件操作:
  二进制文件操作模式字符:'b'

  默认文件中存储的是以字节为单位数据,通常有人为规定的格式
  二进制文件操作需要用字节串进行读写

F.read() / F.readline() / F.readlines() 返回类型
  对于文本文件,F.read()等函数返回为字符串(str)
  对于二进制文件,F.read()等函数返回为字节串(bytes)

F.write() 对于二进制文件与需要用字节串进行操作


F.tell方法:
  作用:
    返回当前的读写位置(从文件头以字节为单位)

F.seek方法
  作用:
    设置读写位置

  F.seek(偏移量, whence=相对位置)
    偏移量
       大于0的数代表向文件末尾方向移动的字节数
       小于0的数代表向文件头方向中移动的字节数
    相对位置
       0 代表从文件头开始偏移
       1 代表从文件当前读写位置开始偏移
       2 代表从文件尾开始偏移

文件的操作方法
F.close()   关闭文件(关闭后文件不能再读写会发生ValueError错误)
F.readline()  读取一行数据, 如果到达文件尾则返回空行
F.readlines(max_chars=-1)   返回每行字符串的列表,max_chars为最大字符(或字节)数
F.writelines(lines)   将字符串的列表或字符串的列表中的内容写入文件


二进制文件操作方法   
F.read(size=-1)   从一个文件流中最多读取size个字符(文本文件)或字节(二进制文件),如果不给出参数，则默认读取文件中全部的内容并返回
F.write(text)   写一个字符串到文件流中，返回写入的字符数(文本文件)或字节数(二进制文件)
F.tell()  返回当前文件流读写指针的绝对位置(字节为单位)
F.seek(offset, whence=0)  改变数据流读写指针的位置，返回新的绝对位置
F.flush()   把写入文件对象的缓存内容写入到磁盘
  
F.readable()  判断这个文件是否可读,可读返回True,否则返回False
F.writable()  判断这个文件是否可写,可写返回True,否则返回False
F.seekable()  返回这个文件对象是否支持随机定位
F.truncate(pos = None)  剪掉 自pos位置之后的数据，返回新的文件长度

mode 模式字符的含义
字符  含义
'r'   以只读方式打开(默认)
'w'   以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开)
'x'   创建一个新文件, 并以写模式打开这个文件,如果文件存在则会产生"FileExistsError"错误
'a'   以只写文件打开一个文件，如果有原文件则追加到文件末尾
'b'   用二进制模式打开
't'   文本文件模式打开 (默认)
'+'   为更新内容打开一个磁盘文件 (可读可写)

面向对象编程  Object-Oriented Programming

  什么是对象:
    对象是指现实中的物体或实体

  对象有什么特征:
    对象有很多属性(名词,形容词)
      姓名,年龄,性别
    对象有很多行为(动作,动词)
      学习,吃饭,睡觉,踢球,工作,借钱

  面向对象
    把一切都看成对象(实例) 用各种对象之间的关系来描述事务

  什么是类
    拥有相同{属性和行为}的对象分为一组，即为一个类
    类是用来描述对象的工具，用类可以创建此类的对象(实例)

  类和对象示意:类具有相同属性和行为的一个群体，实例：这个群体中的某一个具体的对象
     车(类)  ------> BYD E5(京A.88888)  实例(对象)
            \
             \---> BMW X5 (京B.00000) 实例(对象)

    狗(类)  ------> 小京巴(户籍号: 000001)
            \
             \----> 导盲犬(户籍号: 000002)

    int(类)  ----> 100 (对象)
            \
             \---> 200 (对象,实例)

类的创建语句:
  class 类名(继承列表):
      '类的文档字符串' 
      实例方法的定义
      类变量的定义
      类方法的定义(@classmethod)
      静态方法的定义(@staticmethod)
  作用:
    创建一个类
    类用于描述对象的行为和属性
    类用于创建此类的一个或多个对象(实例)
  说明:
    类名必须为标识符(与变量名命名规则相同,建议首字母大写)
    类名实质上就是变量, 它绑定一个类  

构造函数
  构造函数的调用表达式
  语法:
    类名([创建传参列表])

  作用:
    创建这个类的实例对象,并返回此实例的引用关系

  实例对象说明:
    1. 实例有自己的作用域和名字空间,可以为该类的对象添加实例变量(也叫属性)
    2. 实例可以调用类方法和实例方法
    3. 实例可以访问类变量和实例变量

实例方法的调用语法:
  实例.实例方法名(调用传参)
  或
  类名.实例方法名(实例,调用传参)

实例属性 attribute(也叫实例变量)
  每个实例对象可以有自己的变量,称为实例变量(也叫属性)

  语法:
    实例.属性名

  赋值规则:
    首次为属性赋值则创建此属性
    再次为属性赋值则修改属性的绑定关系
  作用:
    记录每个对象自身的数据

删除属性 del 语句
  del 对象.实例变量名

del 语句
  del 变量名          删除变量
  del 列表[整数表达式] 删除列表中的元素
  del 字典[键]        删除字典中的键
  del 对象.属性       删除对象的属性

初始化方法:
  作用:
    对新创建的对象添加属性
  语法:
    class 类名(继承列表):
        def __init__(self [, 形参列表]):
            语句块

    [] 代表中的内容可省略
  说明:
    1. 实始化方法名必须为 '__init__' 不可改变
    2. 初始化方法会在构造函数创建实例后自动调用.且将实例自身通过第一个参数self 传入 __init__ 方法
    3. 构造函数的实参将通过__init__方法的参数列表传入到 '__init__' 方法中
    4. 初始化方法内如果需要return 语句返回,则只能返回None

析构方法:
  语法:
    class 类名:
        def __del__(self):
            ...
  说明:
    析构方法在对象被销毁时被自动调用
    python建议不要在对象销毁时做任何事情,因为销毁的时间难以确定
  示例见:
    del_method.py

预置实例属性
  __dict__ 属性
    __dict__ 属性绑定一个存储此实例自身变量的字典

    dog1 = Dog()
    print(dog1.__dict__)  # {}
    dog1.kinds = '京巴'
    print(dog1.__dict__)  # {'kinds': '京巴'}

__class__ 属性
    此属性用于绑定创建些实例的类

  作用:
    可以借助于此属性来访问创建此实例的类


用于类的函数:
  isinstance(obj, class_or_tuple)  返回这个对象obj是否是某个类的对象或某些类中的一个类的对象,如果是则返回True,否则返回False
  type(obj)  返回对象的类型


类变量
  类变量是类的属性,此属性属于类,不属于此类的实例

  作用:
    通常用来存储该类创建的对象的共有属性
  说明:
    类变量可以通过该类直接访问
    类变量可以通过类的实例直接访问
    类变量可以通过此类的对象的__class__属性间接访问


类内文档字符串
  类内第一个没有赋值给任何变量的字符串为类内文档字符串
  类的文档字符串可以用类的 __doc__属性访问

类的__slots__变量
  作用:
    限定一个类创建的实例只能有固有的属性(实例变量)
    不允许对象添加列表意外的实例属性(实例变量)
    防止用户因错写属性名而引发程序错误
  说明：
    __slots__属性绑定一个字符串列表
    含有__slots__列表的类所创建 的实例对象没有__dict__属性,即此实例不用字典来存储对象的属性(实例变量)

类方法 @classmethod
  类方法是用于描述类的行为的方法,类方法属于类,不属于类的实例

  说明:
    类方法需要使用@classmethod装饰器定义
    类方法至少有一个形参,第一个形参用于绑定类,约定写为'cls'
    类和该类的实例都可以调用类方法
    类方法不能访问此类创建的实例的属性

静态方法 @staticmethod
  静态方法是定义在类内部的函数，此函数的作用域是类的内部
  说明:
    静态方法需要使用 @staticmethod 装饰器定义
    静态方法与普通函数定义相同，不需要传入 self实例参数和cls类参数
    静态方法只能凭借该类或类创建的实例调用
    静态方法不能访问类变量和实例变量(属性)

继承 inheritance 和 派生 derived
  什么是继承/派生
    1.继承是从已有的类中派生出新的类，新类具有原类的数据属性和行为，并能扩展新的行为
    2.派生类就是从一个已有的类中衍生出新的类，在新类的基础上添加新的行为和属性

  为什么继承和派生
    继承的目的是延续旧类的功能
    派生的目的是在旧类的基础上改变原有的功能
  名词：
    基类(base class)/ 超类(super class)/ 父类(father class)
    派生类(derived class)/ 子类 (child class)

单继承
  语法：
    class 类名(基类名)：
      语句块
  说明：
    单继承是指派生类由一个基类衍生出来的新类

继承说明:
  python3 任何类都直接或间接的继承自object类
  object 类是一切类的超类

类的__base__属性
  __base__属性用来记录此类的基类

覆盖 override
  什么是覆盖
    覆盖是指在有继承关系的类中，子类中实现了与基类同名的方法，在子类的实例调用该方法时，实际调用的是子类的覆盖版本，这种现象叫做覆盖

问题：
  当覆盖发生时名字类对象如何调用父类中的被覆盖方法？

调用方式：
  基类名.方法名(实例，实例调用传参......)

super函数
  super(cls, obj) 返回绑定超类的实例(要求obj必须是cls类型的实例)
  super()  返回绑定超类的实例,等同于: super(__class__, 实例方法的第一个参数), 必须在方法内调用

显式调用基类的初始化方法
  当子类中实现了__init__方法，基类的构造方法并不会被调用(覆盖)，此时需要显式调用

issubclass(cls, class_or_tuple) 判断一个类是否继承自其它类,如果此cls 是class 或tuple中的一个派生子类,则返回True, 否则返回False

封装 enclosure
  封装是指隐藏类的实现细节,让使用者不关心这些细节
  封装的目的是让使用者通过尽可能少的方法(或属性)操作对象

私有属性和方法
  python类中以双下划线('__') 开头,不以双下划线结尾的标识符为私有成员,私有成员或只能用 
  类内的方法进行访问和修改
    以__开头的实例变量有私有属性
    以__开头的方法为私有方法

多态 polymorphic
  什么是多态:
    字面意思: 多种状态
    多态是指在有继承/派生关系的类中,调用基类对象的方法,实际能调用子类的覆盖方法的现象叫多态

  状态:
    静态(编译时状态)
    动态(运行时状态)
  说明:
    多态调用方法与对象相关,不与类相关
    Python的全部对象都只有"运行时状态(动态)", 没有"C++语言"里的"编译时状态(静态)"

面向对象的语言的特征:
  继承
  封装
  多态

多继承 multiple inheritance
  多继承是指一个子类继承自两个或两个以上的基类
语法:
  class 类名(基类名1, 基类名2, ...):
      ...
说明:
  1. 一个子类同时继承自多个父类,父类中的方法可以同时被继承下来
  2. 如果两个父类中有同名的方法,而在子类中又没有覆盖此方法时,调用结果难以确定

多继承的问题(缺陷)
  标识符(名字空间)冲突的问题
    要谨慎使用继承

多继承的 MRO (Method Resolution Order) 问题
  类的 __mro__ 属性
    此属性用来记录类的方法查找顺序

函数重写
  在自定义类内添加相应的方法,让自定义类创建的实例能像内建对象一样进行内建函数操作

对象转字符串函数:
  repr(obj)  返回一个能代表此对象的表达式字符串,通常eval(repr(obj)) == obj  (这个字符串通常是给python解释执行器运行用的)

  str(obj)  通过给定的对象返回一个字符串(这个字符串通常是给人阅读的)


对象转字符串函数的重写方法
  repr(obj) 函数的重写方法:
      def __repr__(self):     object

  str(obj) 函数的重写方法:
      def __str__(self):    pirnt(object)

  说明:
    1. str(obj) 函数先查找, obj.__str__()方法,调用此方法并返回结果
    2. 如果没有obj.__str__()方法时,则返回obj.__repr__()方法的结果并返回
    3. 如果obj.__repr__方法不存在,则调用object类的__repr__实例方法显示<__main__.XXXX object at 0xAABBCCDD>格式的字符串

其它内建函数的重写方法:
  __abs__       abs(obj)  函数
  __len__       len(obj)  函数(必须返回整数)
  __reversed__  reversed(obj) 函数(必须返回可迭代对象)
  __round__     round(obj)  函数

数值转换函数的重写
  __complex__  complex(obj) 函数
  __int__      int(obj) 函数
  __float__    float(obj) 函数
  __bool__     bool(obj) 函数

布尔测试函数重写
  格式:
    __bool__
  作用:
    用于bool(obj)　函数取值
    用于if语句的真值表达式中
    用于while语句的真值表达式中
  说明:
    1. 当自定义的类内有 __bool__(self) 方法时，以此方法的返回值作为bool(obj) 的返回值
    2. 当不存在__bool__(self) 方法时，bool(x) 返回__len__(self) 方法的返回值是否为零来测试布尔值
    3. 当不存在__len__(self) 方法时，则直接返回True

迭代器(高级)

什么是迭代器
  可以通过next(it)函数取值的对象就是迭代器

迭代器协议
  迭代器协议是指对象能够使用next函数获取下一项数据，在没有下一项数据时触发一个StopIteration异常来终止迭代的约定

迭代器协议实现方法:
  __next__(self) 方法来实现迭代器协议

语法形式:
  class MyIterator:
      def __next__(self):
          迭代器协议
          return 数据
什么是可迭代对象:
  是指能用iter(obj) 函数返回迭代器的对象(实例)
  可迭代对象内部需要定义__iter__(self)　方法来返回迭代器对象

对象的属性管理函数:
   getattr(obj, name[,default]) 从一个对象得到对象的属性;getattr(x,'y') 等同于x.y,当属性不存在时,如果给出default参数则返回defualt, 如果没有给出default,则产生一个AttributeError错误

   hasattr(obj, name)  用给定的name返回对象obj是否有此属性,此种做法可以避免在getattr(obj,name) 时引发错误

   setattr(obj, name, value) 给对象obj的名为name的属性设置相应的值value; set(x, 'y', z) 等同于 x.y = z

   delattr(obj, name) 删除对象obj中的name属性,delattr(x, 'y') 等同于 del x.y

异常(高级)
  可以用于异常的语句:
    try-except  # 捕获异常,得到异常通知
    try-finally  # 做任何流程(正常流程/异常流程)都必须要执行的语句
    raise  # 发送异常通知
    assert  # 根据条件发送异常通知

with 语句
  语法:
    with 表达式1 [as 变量1], 表达式2 [as 变量2], ...:
        语句块
  作用:
    使用于对资源进行访问的场合,确保使用过程中不管是否发生异常都会执行必要的'清理操作',并释放资源
      (如:文件使用后自动关闭,线程中锁的自动获取和释放等)
  说明:
    执行表达式 as子句中的变量绑定生成的对象
    with语句并不改变异常的状态

环境管理器
  类内有__enter__ 和 __exit__实例方法的类被称为环境管理器
  能够用with进行管理的对象必须是环境管理器

  说明:
    __enter__将在进入with语句时被调用并返回由as变量绑定的对象
    __exit__将在离开with语句时被调用,且可以用参数来判断在离开with语句时是否有异常发生并做出相应的处理

运算符重载
  什么是运算符重载
    让{自定义的类} 生成的对象(实例)能够使用运算符进行操作

  作用:
    1. 让自定义的类的实例能够运行运算符操作
    2. 让程序简洁易读
    3. 对自定义对象将运算符赋序新的运算规则
  说明:
    运算符重载方法的参数已经有固定的含义,不建议改变原有的意义

算术运算符重载
       方法名               运算符和表达式   说明
 __add__(self, rhs)         self +  rhs    加法
 __sub__(self, rhs)         self -  rhs    减法
 __mul__(self, rhs)         self *  rhs    乘法
 __truediv__(self, rhs)     self /  rhs    除法
 __floordiv__(self, rhs)    self // rhs    地板除
 __mod__(self, rhs)         self %  rhs    取模(求余)
 __pow__(self, rhs)         self ** rhs    幂

  rhs(right hand side) 右手边

反向算术运算符的重载
  当运算符的左侧为内建类型,右侧为自义类型的对象进行算术运算符运算时,会出现TypeError错误,
  因无法修改内建类的代码来实现运算符重载,此时需要使用反向算术运算符重载

反向算术运算符重载
       方法名               运算符和表达式   说明
 __radd__(self, lhs)        lhs +  self    加法
 __rsub__(self, lhs)        lhs -  self    减法
 __rmul__(self, lhs)        lhs *  self    乘法
 __rtruediv__(self, lhs)    lhs /  self    除法
 __rfloordiv__(self, lhs)   lhs // self    地板除
 __rmod__(self, lhs)        lhs %  self    取模(求余)
 __rpow__(self, lhs)        lhs ** self    幂

   lhs(left hand side) 左手边

复合赋值算术运算符的重载
  以复合赋值算术运算符  x += y 为例,此运算会优先调用x.__iadd__(y) 方法,
  如果没有__iadd__方法时会将复合赋值运算拆解为 x = x + y,然后调用x = x.__add__(y) 方法
  如果再不存在 __add__方法则会触发TypeError异常

  其它复合赋值运算符也具有相同的规则

复合赋值算术运算符重载
       方法名               运算符和表达式   说明
 __iadd__(self, lhs)        lhs +=  self    加法
 __isub__(self, lhs)        lhs -=  self    减法
 __imul__(self, lhs)        lhs *=  self    乘法
 __itruediv__(self, lhs)    lhs /=  self    除法
 __ifloordiv__(self, lhs)   lhs //= self    地板除
 __imod__(self, lhs)        lhs %=  self    取模(求余)
 __ipow__(self, lhs)        lhs **= self    幂

比较运算符的重载

复合赋值算术运算符重载
       方法名               运算符和表达式   说明
 __lt__(self, rhs)        self <   rhs    小于
 __le__(self, rhs)        self <=  rhs    小于等于
 __gt__(self, rhs)        self >   rhs    大于
 __ge__(self, rhs)        self >=  rhs    大于等于
 __eq__(self, rhs)        self ==  rhs    等于
 __ne__(self, rhs)        self !=  rhs    不等于

位运算符重载
       方法名               运算符和表达式   说明
 __invert__(self)          ~ self      取反(一元运算符)
 __and__(self, rhs)        self &  rhs    位与
 __or__(self, rhs)         self |  rhs    位或
 __xor__(self, rhs)        self ^  rhs    位异或
 __lshift__(self, rhs)     self << rhs    左移
 __rshift__(self, rhs)     self >> rhs    右移

反向位运算符重载
       方法名               运算符和表达式   说明
 __rand__(self, lhs)        lhs &  self    位与
 __ror__(self, lhs)         lhs |  self    位或
 __rxor__(self, lhs)        lhs ^  self    位异或
 __rlshift__(self, lhs)     lhs << self    左移
 __rrshift__(self, lhs)     lhs >> self    右移

复合赋值位运算符重载
       方法名               运算符和表达式   说明
 __iand__(self, rhs)        self &=  rhs    位与
 __ior__(self, rhs)         self |=  rhs    位或
 __ixor__(self, rhs)        self ^=  rhs    位异或
 __ilshift__(self, rhs)     self <<= rhs    左移
 __irshift__(self, rhs)     self >>= rhs    右移




一元运算符重载
       方法名               运算符和表达式   说明
 __invert__(self)          ~ self      取反(一元运算符)
 __pos__(self)             + self      正号
 __neg__(self)             - self      负号

in / not in 运算符重载
重载方法:
  def __contains__(self, e):
      ....

索引和切片运算符的重载
  方法名                  运算符和表达式     说明
 __getitem__(self, i)      x = self[i]   索引/切片取值
 __setitem__(self, i, val) self[i] = val 索引/切片赋值
 __delitem__(self, i)      del self[i]   删除索引/切片

作用:
  让自定义的类的对象能够支持索引和切片操作

slice 函数:
  作用:
    用于创建一个slice切片对象,此对象存储切片的信息
  格式:
    slice(start=None, stop=None, step=None)
  slice对象的属性
    s.start 切片的起始值, 默认为None
    s.stop  切片的终止值, 默认为None
    s.step  切片的步长, 默认为None

特性属性 @property    @方法名.setter
  实现其它语言所拥有的 getter 和 setter 的功能
  作用:
    用来模拟一个属性
    通过@property 装饰器可以对模拟属性的取值和赋值加以控制
    让类里的方法变为有设置读取属性，或设置属性
    PEP8编码规范文档详见:
    pbase/python_base_docs_html/PEP8编码规范.html


    sudo -i  转根目录
    cat t1.frm