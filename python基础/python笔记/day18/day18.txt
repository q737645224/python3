day17回顾

class 语句
  创建类:
    class 类名:
        def 方法名(self, 方法形参):
           ...
        def __init__(self, 方法形参):
            '''通常在此处对self对象进行初始化操作'''

        def __del__(self):    #当用来绑定对象的变量，改变绑关系时，被绑定的对象会释放or 程序结束时也会释放
            '''通常用来销毁此对象绑定的数据及释放资源'''

对象有两种特征：
    属性（名词，形容性的词）
        实例变量（实例属性）
    行为（方法，动词）
        实例方法

  实例方法(method) 描述一个对象有哪儿些行为为
  属性(实例变量)
    添加/修改属性
      对象.属性名 = 表达式
    del 对象.属性名

    类    |     对象          实例
          |
  class   |   object        instance
  Human                       h1

  

 __dict__ 属性
   绑定字典(字典里用来保存属性)

 __class__属性
   绑定创建此对象的类


isinstance(obj, 类或元组)
type(obj) 

class student():
    pass

def set_score(self, score):
    self.score = score

student.set_score = set_score
类名称    设置方法名

day18笔记:
1.类变量
  类变量是类的属性,此属性属于类,不属于此类的实例

  作用:
    通常用来存储该类创建的对象的共有属性
  说明:
    类变量可以通过该类直接访问
    类变量可以通过类的实例直接访问
    类变量可以通过此类的对象的__class__属性间接访问   self.__class__
  示例见:
    class_variable.py

2.类的文档字符串 __doc__
  类内第一个没有赋值给任何变量的字符串为类的文档字符串
  类的文档字符串可以用类的 __doc__属性访问

  class Dog:
      '''这是一种小动物'''

  >>> help(Dog)  # 查看文档字符串
  print(Dog.__doc__)  # 类的__doc__属性用来绑定文档字符串


3.类的 __slots__ 列表   __slots__ ['name', 'age']
  作用:
    [限定]一个类创建的实例只能有固定的属性(实例变量)
    不允许对象添加列表以外的实例属性(实例变量)
    防止用户因错写属性的名称而发生程序错误 **
  说明:
    1. __slots__列表绑定一个字符串列表
    2. 含有__slots__列表的类所创建 的实例[对象没有]__dict__属性,即此实例不用字典来存储对象的属性(实例变量)

  示例见:
    slots.py


4.类方法 @classmethod
  类方法是用于[描述类的行为]的方法,类方法属于[类],不属于类的实例

  说明:
    类方法需要使用@classmethod装饰器定义
    类方法至少有一个形参,第一个形参用于绑定类,约定写为'cls'
    类和该类的实例都可以调用[类方法]
    类方法不能访问此类创建的[实例的属性]
  示例见:
    class_method.py    a.set_v(1313)   =   [a.__calss__].set_v(1313)

静态方法 @staticmethod
  静态方法是定义在类内部的函数,此函数的作用域是[类的内部]

  说明:
    静态方法需要使用 @staticmethod装饰器定义
    静态方法与普通函数定义相同,不需要传入self实例参数和cls参数
    静态方法只能凭借该类或类创建的实例调用
    静态方法不能访问类变量和实例变量(属性)
  示例见:
    static_method.py

实例方法, 类方法, 静态方法, 函数 小结
  不想访问 类内 和 实例内 的变量,用静态方法
  只想访问类内变量,不想访问实例变量,用类方法
  即要访问内变量,也想访问实例变量用实例方法
  函数与静态方法相同,只是静态方式的作用域定义在类内


练习:
  用类来描述一个学生的信息(可以修改之前写的Student类)
    class Student:
         .... 此处自己实现

    学生信息有:
       姓名, 年龄, 成绩

    将一些学生的对象存于列表中,可以任意添加和删除学生信息
      1) 打印出学生的个数
      2) 打印出所有学生的平均成绩
      3) 打印出所有学生的平均年龄


继承 inheritance / 派生 derived
  什么继承/派生
    1.继承是指从已有的类中派生出新的类,新类具有原类的行为,并能扩展新的行为
    2.派生类就是从一个已有类中衍生成新类,在新类上可以添加新的属性和行为
  为什么继承/派生
    继承的目的是延续旧类的功能
    派生的目的旧是在旧类的基础上改变原有的功能
  作用:
    1.用继承派生机制,可以将一些共有功能加在基类中,实现代码的共享
    2.在不改变基类的代码的基础上改变原有的功能
  名语:
    基类(base class) /超类(super class)/ 父类(father class)
    派生类(derived class) / 子类(child class)



单继承:
  语法:
    class 类名(基类名):
       语句块
  说明:
    单继承是指由一个基类衍生出新的类
  示例见:
    inherit.py


继承说明:
  python3 任何类都直接或间接的继承自object类
  object 类是一切类的超类

类的__base__属性
  __base__属性用来记录此类的基类

python内建的类详见:
   >>> help(__builtins__)

覆盖 override
  覆盖是指在有继承关系的类中,子类中实现了与基类同名的方法,在子类的实例调用该方法时,实际调用的是子类中的覆盖版本,这种现象叫做覆盖

  示例见:
    override.py



子类对象显式调用基类(被覆盖)方法的方式:
  基类名.方法名(实例, 实际调用传参)


super 函数
  super(cls, obj) 返回绑定超类的实例(要求obj必须是cls类型的实例)
  super()  返回绑定超类的实例,等同于: super(__class__, 实例方法的第一个参数), 必须在方法内调用

  作用:
    借助super() 返回的实例间接调用其父类的覆盖方法



显式调用基类的初始化方法
  当子类中实现了 __init__ 方法,基类的构造方法并不会被调用
  def __init__(self, ...)

  示例见:
    super_init.py


思考:
   list类里只有一个append向末尾加一个元素的方法,但没有向列表头部添加元素的方法,试想能否为列表在不改变原有类的基础上添加一个insert_head(n) 方法,实现在列表的头部(前部)添加元素
  如:
    class MyList(list):
        def insert_head(self, n):
            ...  # 需要自己添加代表

    myl = MyList(range(3, 6))
    print(myl)  # [3, 4, 5]
    myl.insert_head(2)
    print(myl)  # [2, 3, 4, 5]
    myl.append(6)
    print(myl)  # [2, 3, 4, 5, 6]


练习:
  1. 看懂学生管理程序,每一步做的事情及思想
  2. 把同学们自己的学生信息管理程序用Student学生对象来存储信息;要求,不要在外部直接操作学生的属性,所有操作行为用方法来代替
  
练习:
  写一个类Bicycle类 ,有 run方法.调用时显示骑行里程km
    class Bicycle:
        def run(self, km):
            print('自行车骑行了', km, '公里')
  再写一个类EBicycle(电动自行车类), 在Bicycle类的基础上添加了电池电量 volume 属性, 有两个方法:
     1. fill_charge(self, vol)  用来充电, vol为电量
     2. run(self, km) 方法每骑行10km消耗电量1度,同时显示当前电量,当电量耗尽时调用 父类的run方法继续骑行

    b = EBicycle(5)  # 新买的电动有内有5度电
    b.run(10)  # 电动骑行了10km还剩 4 度电
    b.run(100)  #电动骑行了40km,还剩0度电,其余60用脚登骑行
    b.fill_charge(10)  # 又充了10度电
    b.run(50)  # 骑行了50公里剩5度电

