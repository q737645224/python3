 day15回顾:
  迭代器
    得到迭代器:
      iter(x)  返回一个访问x的迭代器
    从迭代器it中拿数据
      next(it)
        在没有数据时用StopIteration异常来通知
  for 语句可以遍历可迭代对象

两种生成器:
  生成器函数:
    生成器函数里有定有 yield 语句
  
  next(it) 每次调用，生成器函数才会执行

  生成器表达式:
    (表达式　for 变量 in 可迭代对象 if 真值表达式)
  

迭代工具函数:
  zip(可迭代对象1, 可迭代对象2, .....) zip(iterable,*iterable)
  enumerate(可迭代对象, start=0)

序列:
  字节串bytes，字节数组bytearray

  运算:
    + += * *=
    < > <= >= == != 
    in / not in 
    索引和切片
  
  b'' b""   ....
  bytes() / bytearray()
  bytes(iterable) / bytearray(iterable)
  bytes(n)  / bytearray(n)
  bytes(字符串, 'utf-8') / bytearray(字符串,'utf-8')

  字节数组是可变的序列:
    支持索引和切片赋值
    支持一些方法:
       ba.append(x)
       ba.pop(x)
       ...
       ba.clear()

   s = "你好"
   b = s.encode() # b = s.encode('utf-8')
   s2 = b.decode()  # s2 = b.decode('utf-8')






问题:
  如何长期保存计算机中的数据
  　　需要用文件操作

文件　File 
  文件是用于数据存储和单位
  文件通常用来长期存储数据
  文件中的数据是以字节为单位进行顺序存储的



文件的操作流程:
  1. 打开文件
  2. 读/写文件
  3. 关闭文件
  注:
    任何的操作系统，一个应用程序同时打开文件的数量有最大数限制

文件的打开函数
  open(file, mode='rt')  用于打开一个文件，返回此文件流对象,如果打开文件失败，则会触发OSError错误

文件的关闭方法:
  F.close()   # 关闭文件，释放系统资源

  示例见:
    file_open.py

文本文件操作
  操作模式:
     't'
  说明：
  　　1. 默认文件中存储的都为字符数据，在读写过程中会自动进行编解码操作，
  　　2. 文本文件以行为单位进行分隔，在python内部统一用'\n'作用为换行符进行分隔
  　　3. 对文本文件的读写操作需要用字符串(str) 进行数据操作

  各操作系统的换行符
    Linux换行符: '\n'
    Windows 换行符: '\r\n'
    新的Mac OS 换行符: '\n'
    旧的Macintosh换行符: '\r'(已不用了)



练习:
  自己写一个文件 'info.txt' 内部存一些文字信息
    如:
      张三 20 100
      李四 21 96
      小王 22 98
    注：
     以上信息用空格作用分隔分开
     写程序将这些数据读取出来，

文本文件读方法：
  F.readline()
  F.reanlines()
  F.reanline


文件流对象是可迭代对象，迭代过程中将以换行符'\n'作为分隔符依次获取
　　示例:
    f = open('phonenumber.txt')
    for line in f:
        print(line)  # 打印每一行的数据

标准输入输出文件:
  sys.stdin  　　　标准输入文件(默认为键盘设备)
                    ctrl+d 输入文件结束符
  sys.stdout    标准输出文件（默认为屏幕终端）
  sys.stderr    标准错误输出文件（默认为屏幕终端）
  模块名：sys
  说明：
  1.标准文件不需要打开和关闭就可以使用
  2.每一个python程序启动后都会有以上三个文件供我们使用
  
  示例见:
    stdin.py
    stdin2.py
    stdout.py
    stderr.py

二进制文件操作:(优点：可以对任何类型的数据操作)
  模式字符：'b'
  二进制文件操作模式字符: 'b'

  默认文件中存储的是以字节为单位数据,通常有人为规定的格式
  对二进制文件的读写需要用字符串(bytes)进行操作
常用的操作方法：
F.read([字节数/字符数])
F.read() / F.readline() / F.readlines() 返回类型
  对于文本文件,F.read()等函数返回为字符串(str)
  对于二进制文件,F.read()等函数返回为字节串(bytes)

F.write() 对于二进制文件与需要用字节串进行操作

F.tell方法:
  作用:
    返回当前的读写位置(从文件头（0开始）以字节为单位)

F.seek方法
  作用:
    设置读写位置

  F.seek(偏移量, whence=相对位置)
    偏移量
       大于0的数代表向文件末尾方向移动的字节数
       小于0的数代表向文件头方向中移动的字节数
    相对位置
       0 代表从文件头开始偏移
       1 代表从文件当前读写位置开始偏移
       2 代表从文件尾开始偏移
 F.flush()  把写入文件对象的缓存内容写入到磁盘(强制)
 F.readable()、F.writable()、F.seekable()、
 F.truncate(pos = None) 

  示例见:
    seek.py

问题:
  十个汉字占多少个字节
      UTF-8: 30个字节
      GBK  : 20个字节
汉字编码(只讲两种)
  国标系列:
    GB18030 (二字节或四字节编码, 共27533个字)
      GBK (二字节编码, 共21003个字)
        GB2312 (二字节编码,共6763个汉字)
    (Windows常用)
  国际标准: UNICODE <---> UTF-8
    (Linux / Mac OS X / IOS / Android 等常用)



python编码字符串:
  'gb2312'
  'gbk'
  'gb18030'
  'utf-8'
  'ascii'
  ...
  以上字符串用于encode和 decode中

编码注释:
  在python源文件的第一行或第二行写入如下内容:
    # -*- coding:gbk -*-
    # 设置源文件编码格式为gbk
  或
    # -*- coding:utf-8 -*-
    # 设置源文件编码格式为utf-8
  作用:
    告诉解释执行器,此前文件的编码是什么?


练习:
  1. 写程序，循环输入很多个人的姓名，电话号码,
    当输入结束后将这些信息存入到文件phonenumber.txt中
    (建议先用列表暂存数据，格式自己定义)

　　２．　写程序，将phonenumber.txt文件中的数据读取出来．
　　　　　再用以下格式打印出来:
      如:
        小张 的电话是 13888888888
        小李 的电话是 13999999999


练习:
  1. 写程序实现复制文件的功能
    要求:
       1. 要考虑特大文件问题
       2. 要关闭文件
       3. 要能复制二进制文件
    如:
      请输入源文件路径名:  /home/tarena/xxx.tar.gz
      请输入目标文件路径名: ./a.tar.gz
    显示:
      文件已成功复制

  
  1.写程序，读入任意行文字，当输入空时结束输入先将这些读入的文字存入列表中，然后再次列表里的内容存入到’input.txt'文件中
  2.写程序，从上的input.txt中读取之前输入的数据，读取到列表中，在加上行号进行输出


1.当是用户输入一系列整数，当输小于零的整数的时候，结束
1）将这些数字存于列表里
2）将列表中的数字写入到文件numbers.txt中
（提示：需要将整数转为字符串或字节串才能存入文件中）
2.写程序，将上题的numbers.txt中的整数读入到内存中形成列表计算这写数中的最大值，最小值和它们的和
3.写程序，实现复制文件功能
 要求：
  1）要考虑关闭文件问题
  2）要考虑超大文复制问题
  3）要能复制二进制文件（如：/usr/bin/python3等）

  2. 修改学生信息管理程序,要求加入两个功能:
      9)  保存信息到文件(si.txt)
      10) 从文件中读取数据(si.txt)
    








