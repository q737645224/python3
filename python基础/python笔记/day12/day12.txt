day11回顾
函数式 functional programing
  偶合度
    可重入函数
    不可重入函数
  高阶函数
    map, filter, sorted
    数据处理，数据过滤，排顺序
  递归 recursion  函数直接或间接的调用自己
    递推：
    回归：

  闭包 closure:优点，方便运用，缺点，占用内存
    def mt(y):
        def mx(x):
            return x*y


day12笔记：
1.装饰器 decorators(专业提高篇)
  装饰器是一个函数，主要作用是用来包装另一个函数或类(后面才讲)
  装饰的目的：是在不改变原函数名（或类名) 的情况下，改变被包装对象的行为
             注：在不修改原程序的情况下添加一定的行为，或功能

函数装饰器：
  函数装饰器指装饰器传入的是一个函数，返回的也是一个函数

  语法:
    def 装饰器函数名(参数): #参数(函数)通常只有一个
        语句块
        return 函数对象

    @装饰器函数名<换行>
    def 函数名(形参列表):
        语句块

  示例见:
1. mydeco1.py
    def mydeco(fn):  #此装饰器用来替换原来的函数
      def fx():
         print("fx被调用")
      return fx
  @mydeco
  def myfun():
     print("myfun被调用")   # 此操作等同于myfun = mydeco(myfun)
 
  myfun()

2. mydeco2.py
    #此装饰器函数用来包装被装饰函数
    def mydeco(fn):
        def fx():
           pirnt("调用之前")
           fn()  #调用被装饰函数      形成了闭包
           print("调用之后")
        return fx
  @mydeco
  def myfun():
     print("myfun被调用")
myfun()


def mydeco(fn):
  def fx():
      print("调用之前")
      fn()  #调用被装饰函数
      print("调用之后")
  return fx()

def myfun():
    print("myfun被调用")
mydeco(myfun)


3.mydeco3.py
#装饰器的应用场合及功能
#---------装饰器函数----------------#
def privileged_check(fn):
    def fx(name, x):
        print("正在进行权限验证...")
        if True:
            fn(name, x)
        else:
           print("权限验证失败")
      return fx
def message_send(fn):
    def fy(n, money):
        fn(n, money)
        print("正在发送短息给%s..." % name)
    return fy
#-----------------------------#
  def savemoney(name,x):
      print(name, "存钱", x,'元')
  def withdraw(name, x):
      print(name, '取钱', x, '元')
#---------调用者小张写的程序-----------#
@message_send     (2)
@privileged_check (1)  #装饰器符合就近原则
savemoney('小王',200)   #在调用一次装饰器后savemoney 就绑定的 fx 这个函数名
savemoney('小赵',400)    #只会调用一次装饰器

withdraw('小李', 500)

    mydeco4.py

函数的文档字符串
  函数内第一次未被赋值给[任何变量的字符串]是此函数的文档字符串
  语法:
    def 函数名(参数列表):
        '函数文档字符串'
        函数语句块
  说明:
    1. 文档字符串通常用来说明本函数的[功能和使用方法]
    2. 在交互模式下输入: help(函数名) 可以查看函数的'文档字符串'
    3. 函数的文档字符串绑定在函数的 __doc__ 属性上
    mysum.__ 回车回车

  示例:
    def myfun(name, x):
        '''这是函数的文档字符串
        name 表示人名
        x 表示钱数
        '''
        pass
    >>> help(myfun)

函数的 __doc__ 属性
   用于绑定函数的文档字符串
函数的__name__属性
  __nanme__属性用于记录函数名
说明：以双下划线开头，以双下划线结尾的标识符通常代表python的特殊变量


函数定义语句(def 语句) 的完整语法:
  [@装饰器1]
  [@装饰器2]  #装饰器有就近原则
  [...]
  def 函数名([位置形参], [*元组形参], [命名关键字形参], [**字典形参]):
      '''文档字符串'''
      语句块

  注: [] 代表其内部可以省略

面试题：
L = [1, 2, 3, 4]
def f=(n = 0, list =[]):
    list.append(n)
    print(list)

  >>> f(100)
    [100]
>>> f(200)
   [100, 200] 


模块 Module
  什么是模块:
    模块是一个包含有一系列[数据、函数、类]等组成的[程序组]
            模块是一个文件，模块文件名通常以.py结尾.
  作用:
    让一些相关的数据，函数，类等有逻辑的组织在一起，使逻辑结构更加清晰
    模块中的数据,函数，类等可提供给其它模块或程序使用

  模块的分类:
    内建模块(builtins) 在解析器的内可以直接使用
    标准库模块, 安装python时已安装且可以直接使用  .py文件    
    第三方模块(通常开源),需要自己安装
    用户自己编写的模块(可以作为其它人的第三方模块)

模块的导入语句
1.import 语句   #推荐使用第一个
2.from 模块名 import 语句   #from m import a, b, c
3.from 模块名 import * 语句  #可能会导入未知的函数覆盖自己定义的函数名
  语法:
    import 模块名1 [as 模块新名1], 模块名2 [as 模块新名2], ....
  示例:               #给模块取一个小名
    import math  # 导入math模块 
    import sys, os, time 
  作用:
    将某模块整体导入到当前模块中
  用法:
    模块名.属性名
    或
    模块名.函数属性名(实参传参)
  如:
    math.factorial(5)
函数：
  dir(obj) 函数返回所有属性的字符串列表
  help(obj) 函数可以查看模块的相关文档字符串

练习:
  1. 输入一个圆的半径，打印出这个圆的面积
  2. 输入一个圆的面积，打印出这个圆的半径 

  (要求用math模块内的函数和数据实现)


from  import 语句
  语法:
    from 模块名 import 模块属性名1 [as 属性新名1], 模块属性名2 [as 属性新名2], ....
  作用:
    将某模块的一个或多个属性导入到当前模块的作用域
  示例:
    from math import factorial as fac
    from math import sin
    from math import pi
    print(fac(5))  # 120


from import * 语句
  语法:
    from 模块名 import *
  作用:
    将某模块的所有属性导入到当前模块
  示例:
    from math import *
    print(sin(pi/2)) 
    print(factorial(5))


dir 函数:
  dir([对象])  返回一个字符串的列表

  说明:
    如果没有给参数调用，则返回当前作用域内的所有变量的列表
    如果给定一个对象为作参数，则返回这个对象的所有变量的列表
       1) 对于一个模块，返回这个模块的全部属性
       2) 对于一个类，返回这个类的所有变量，并递归基类对象的所有变量
       3) 对于其它的对象，返回所有类变量和基类变量


内建 模块

math 模块
  模块名 math
  详见:
    python_base_docs_html/数学模块math.html


时间模块 time
  模块名: time

  详见:
    python_base_docs_html/时间模块time.html

练习:
  写一个程序，输入你的出生日期，
    1) 算出你已经出生多少天?
    2) 算出你出生的那天是星期几?





练习:
  1. 请编写函数fun 其功能是计算下列多项式的和:
    fn = 1 + 1/1! + 1/2! + 1/3! + 1/4! + .. + 1/n!
    (建义用数学模块的factorial实现)
  求当n 等于100时,fn的值
  看一下fn(100)的值是什么
  

  3 写函数f(n)求下多项式的和
  fn = 1/1 - 1/3 + 1/5 - 1/7 + 1/9 .... 1/(2*n-1)的和

  求当n取值为1000000时，
    1） 打印 f(1000000) 的值
    2） 打印 f(1000000) * 4的值，看看是什么






  1.写一个程序，以电子时钟格式:
   HH:MM:SS格式显示时间
   要求每过一秒刷新一次
  2.编写一个闹钟程序，启动时设置定时间，到时间后打印一句：
  “时间到了”，然后程序退出

  3看懂学生信息管理系统