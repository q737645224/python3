day16回顾:
   文件
     文本模式
       把文件的字节码自动转换为字符串,
       换行符会自动转换为'\n'
       F.read()
       F.readline()
       F.readlines()
       F.write
    二进制模式
       通过字节串(字节数组)进行读写
       F.read()
       F.write()
       F.tell()   返回当前文件流的读写位置
       F.seek()   清空缓冲区
    模式字符:
       'b'
       't'
       'r'
       'w'
       'a'
       'x'
       '+'

文件流对象是可迭代对象
    f = open('xxx.py')
    for line in f:
        ...

汉字编码:
   国标: GB18030(GBK(GB2312))
   国际标准: UNCODE32(UNCODE16)  ---  UTF-8

   编码字符串:
   'gb18030'
     'gbk'
     'gb2312'
     'utf-8'
     'ascii'
  编码注释:
    # -*- coding: utf-8 -*-


day17笔记:
面向过程编程:
   函数做单位

1.面向对象编程 Ojbect-Oriented Programing(oop)
  什么是对象:
    对象是指现实中的物体过实体

  对象有什么特征:
    对象有很多属性(名词,形容词)
      姓名,年龄,性别
    对象有很多行为(动作,动词)
      学习,吃饭,睡觉,踢球,工作,借钱
  面向对象：
      面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的息，并处
    理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递
      在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向
    对象中的类（Class）的概念
      把一切都看成[对象]=[实例]（Instance）， 用各种对象之间的关系来描述事务
    特点：
    数据封装、继承和多态是面向对象的三大特点
  什么是类:
      1.拥有相同属性和行为的对象分为一组,即为一个类
      2.类是用来描述对象的工具,用类可以创建此类的对象(实例)
      3.类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。

  面向对象示意:
        车(类)  ------> BYD E5(京A.88888)  实例(对象)
                \
                 \---> BMW X5 (京B.00000) 实例(对象)
        狗(类)  ------> 小京巴(户籍号: 000001)
                \
                 \----> 导盲犬(户籍号: 000002)
        int(类)  ----> 100 (对象)
                \
                 \---> 200 (对象,实例)


2.类的创建语句:
  class 类名(继承列表):
      '类的文档字符串' 
      实例方法的定义
      类变量的定义
      类方法的定义(@classmethod)
      静态方法的定义(@staticmethod)
  作用:
    创建一个类
    类用于描述对象的行为和属性
    类用于创建此类的一个或多个对象(实例)
  注:
    类名必须为标识符（与变量名命名规则相同，建议搜字母大写）
    类名实质上就是变量, 它绑定一个类

  示例见:
    class.py

3.构造函数
  构造函数的调用表达式
  语法:
    类名([创建传参列表])
  作用:
    创建这个类的实例对象,并返回此实例的引用关系
  示例见:
    constructor.py
实例对象说明:
  1. 实例有自己的作用域和名字空间,可以为该类的对象添加实例变量(也叫属性)
  2. 实例可以调用类方法和实例方法
  3. 实例可以访问类变量和实例变量


4.实例方法(method)  
  语法:
      class 类名(继承列表):
          def 实例方法名(self, 参数1, 参数2, ...):
              '文档字符串'
              语句
    作用:
      用于描述一个对象的行为,让此类型的全部对象都拥有相同的行为
    说明:
      1. 实例方法实质是函数,是定义在类内的函数
      2. 实例方法至少有一个形参有,第一个形参代表调用这个方法的实例,一般命名为 'self'

    实例方法的调用语法:
      实例.实例方法名(调用传参)
      或
      类名.实例方法名(实例,调用传参)
      示例见:
        instance_method.py



    实例属性 attribute(也叫实例变量)
      每个实例对象可以有自己的变量用来保存对象自己的数据,称为实例变量(也叫属性)
      语法:
        实例.属性名
      赋值规则:
        1.首次为属性赋值则创建此属性
        2. 再次为属性赋值则修改属性的绑定关系
      作用:
        记录每个对象自身的数据

      示例见:
        attribute.py

  练习:
    自己写一个'人'类: Human
    class Human:
        def set_info(self, name, age, address='未知'):
            '''此方法用来给人对象添加'姓名', '年龄', '家庭住址'三个属性'''
            ...  # << 此处自己实现
        def show_info(self):
            '''显示此人的全部信息'''
            ... # 此处自己实现
    如:
      h1 = Human()
      h1.set_info('小张', 20, '北京市朝阳区')
      h2 = Human()
      h2.set_info('小李', 18)
      h1.show_info()  # 小张今年 20 岁,家庭住址:北京市朝阳区
      h2.show_info()  # 小李今年 18 岁,家庭住址:末知


5.删除属性 del 语句

    del 对象.实例变量名

   例如:
      class Dog:
          pass
      dog1 = Dog()
      dog1.color = "白色"
      del dog1.color  # 删除 

  del 语句
    del 变量名                                    删除变量
    del 列表[整数表达式] del L[1]   del L[::2]     删除列表中的元素
    del 字典[键]                   del d['name'] 删除字典中的键
    del 对象.属性                                  删除对象的属性

6.初始化方法:
    作用:
      对新创建的对象添加属性
    语法:
      class 类名(继承列表):
          def __init__(self [, 形参列表]):
              语句块

      [] 代表中的内容可省略
    说明:
      1. 初始化方法名必须为 '__init__' 不可改变
      2. 初始化方法会在构造函数创建实例后自动调用.且将实例自身通过第一个参数self 传入 __init__ 方法
      3. 构造函数的实参将通过__init__方法的参数列表传入到 '__init__' 方法中
      4. 初始化方法内如果需要return 语句返回,则只能返回None
    示例见:
      init_method.py

练习:
  写一个Student类
    1) 为该类添加初始化方法, 实现在创建对象时自动设置
      '姓名','年龄', '成绩' 属性
    2) 添加set_score方法能修改成绩信息
    3) 添加show_info方法打印学生对象的信息

  如:
    class Student:
        def __init__(...):
            ...
        ...

    s1 = Student('小王', 15, 59)
    s1.show_info()  # 小王 今年 17 岁, 成绩是: 59
    s1.set_score(80)
    s1.show_info()  # 小王 今年 17 岁, 成绩是: 80



析构方法:
  语法:
    class 类名:
        def __del__(self):
            ...
  说明:
    析构方法在对象被销毁时被自动调用
    python建议不要在对象销毁时做任何事情,因为销毁的时间难以确定
  示例见:
    del_method.py

预置实例属性
  __dict__ 属性
    __dict__ 属性绑定一个存储此实例自身变量的字典

  示例:
    class Dog:
        pass

    dog1 = Dog()
    print(dog1.__dict__)  # {}
    dog1.kinds = '京巴'
    print(dog1.__dict__)  # {'kinds': '京巴'}

__class__ 属性
    此属性用于绑定创建些实例的类

  作用:
    可以借助于此属性来访问创建此实例的类
  示例:
    class Dog:
        pass
    dog1 = Dog()
    print(dog1.__class__)
    dog2 = dog1.__class__()
    print(dog2.__class__)

用于类的函数:
  isinstance(obj, class_or_tuple)  返回这个对象obj是否是某个类的对象或某些类中的一个类的对象,如果是则返回True,否则返回False
  type(obj)  返回对象的类型
  type(3.14)("1324.321")
  type(2)("243")  #出错


面向对向的综合示例:
  有两个人(Human):
    1.
      姓名: 张三
      年龄: 35
    2.
      姓名: 李四
      年龄: 8
    行为:
      1. 教别人学东西 teach
      2. 赚钱 works
      3. 借钱 borrow
    事情:
      张三 教 李四 学 python
      李四 教 张三 学 跳皮筋
      张三 上班赚了 1000 元钱
      李四 向 张三 借了 200 元钱
      打印张三的信息: 35岁 的 张三 有钱 800元, 它学会跳皮筋
      打印李四的信息: 8岁 的 李四 有钱 200元, 它学会python

练习:
  修改原来的学生信息管理程序,将原来字典来存储学生信息,
  现改为用对象来存储学生信息
    # file : student.py  
    class Student:
        def __init__(self, n, a, s):
             ....

    L = []
    # L.append({...}) 改为对象
    L.append(Student('xiaozhang', 20, 100))

    (要求类Student 要写在模块 student.py中)








    