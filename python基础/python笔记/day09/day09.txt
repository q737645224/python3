day08回顾:
  集合set，固定集合frozenset

  & | - ^ < >
  >= <= == != 
  in, not in

  S.add()
  S.remove()
  S.discard() 
  S.clear()
  S.pop()
  ....
  集合是可迭代对象

  集合推导式:
    [x for x in range(10)]
    {x for x in range(10)}
    {x:x**2 for x in range(10)}


容器类小结：
  字符串str 
  列表 list
  元组 tuple
  字典 dict
  集合 set
  固定集合 frozenset+

函数　function    （与函数类似）       方法： 对象.方法
  def 语句语法:
    def 函数名( 形参列表 ):
        语句块

  作用:
    创建函数（打包一个有一定功能语句块）

函数调用:
  函数名（变量，用来绑定语句块）( 实参列表 )

  def fa():
      pass

  v = fa()  # v绑定None

return 语句
作用：给调用此函数的表达式返回一个数据的引用关系







day09笔记

1.函数的参数传递
  传递方式:
    1.位置传参
      2.序列传参
    3.关键字传参
      4.字典关键字传参

2.函数形参的定义方式:
  1. 位置形参
   2. 星号元组形参    (arg1,*args)
  3. 命名关键字形参    (*,c, d)
   4. 双星号字典形参   (**kwargs)

1.位置传参:
  实际参数(实参) 的对应关系与形式参数(形参)的对应关系是按位置来依次对应的

  示意:
    def mymin(a, b, c):
        pass

    mymin(    1, 2, 3)  #1,2,3位置位子对应关系传给a,b,c

  示例见:
    position_give_args.py
  说明:
    实参和形参[通过位置]进行传递和匹配
    实际参数的个数必须与形式参数的[个数相同]
　　
2.序列传参:
  序列传参是指在函数调用过程中，用 * 将[序列拆解]后[按位置]进行传递的传参方式

  说明:
    序列传参时，序列拆解的位置将与形参－－对应
    序列的位置信息对应相应的形参位置
    def myfun(a, b, c)
        print()....

  s1 = [11, 22, 33]
  s2 = (44, 55, 66)
  s3 ="ABC"
  #myfun(s2[0], s2[1], s3[2])   等同于  myfun(*s2)


  示例见:
    sequence_give_args.py

3.关键字传参
  关键字传参是指传参时，按着[形参的名称]给形参赋值
  实参和形参按形参名进行匹配

  示例见:
    keywords_give_args.py

4.字典关键字传参
  是指实参为字典，将字典用　'**' 拆解后再进行[关键字]传参的传参方式

  示例见:
  def myfun1(a, b, c):
    # 这是一个函数的传参示例，此函数以后不会改变代码
    print('a 的值是:', a)
    print('b 的值是:', b)
    print('c 的值是:', c)
# 以下是关键传参
myfun1(b=22, c=33, a=11)
myfun1(c=666, b=555, a=444)
    dict_keywords_give_args.py
  说明:
    字典的键名和形参名必须一致
    字典的键名必须为字符串(标识符)
    字典的键名要在形参中存在
print（1,2,3, sep="#", end="\n"
函数的综合传参
  函数的传参方式，在能确定[形参能唯一匹配]到相应实参的情况下可以任意组合

  说明:
    位置传参(序列传参) 要在 关键字传参(字典关键字传参)的左侧
  示例:
    def myfun1(a, b, c):
        pass
    # 调用时:
    myfun1(100, *[200, 300])
    myfun1(*(100, 200), 300)
    myfun1(*[100], 200, *(300,))
    myfun1(100, c=300,b=200) # 正确
    myfun1(c=300, b=200, 100)  # 错误
    myfun1(100, **{'c':300, 'b':200})


练习:
  写一个函数minmax(a, b, c)  有三个参数，这回这三个参数中的最小值和最大值，
  要求，形成元组，最小值在前，最大值在后，如:

  def minmax(a, b, c):
      ...

  t = minmax(11, 33, 22)
  print(t)  # (11, 33)  # <<< 打印元组
  xiao, da = minmax(6, 5, 4)
  print('最小值:', xiao, '最大值:', da)




-----------以下讲函数的定义时，如何定义形参----------
函数的缺省参数:
  语法:
    def 函数名(形参名=默认实参1, 形参名2=默认实参2, ...):
        语句块

  示例见:
    default_args.py

  说明:
    1.[缺省参数]必须从右至左依次存在，如果一个参数有缺省参数，则其右侧的所有参数都必须有缺省参数
    2.缺省参数可以有0个或多个，甚至全部都有缺省参数
     如:
     def fn(a, b=10,10)   #出错
def info(name, age=1, address='未填定'):
    print('我叫', name, '我今年', age,
          '岁， 我家住址:', address)
info("魏明择", 35, "北京市朝阳区")
info("Tarena", 北京市)   # 出错   缺省位置需要有一定的对应
info('张飞')
#info()  # 出错
info('小张', age=20)


练习:
  写一个函数 myadd, 此函数可以计算两个数的和,也可以计算三个数的和

  def myadd(......):
     ....
  print(myadd(10, 20))  # 30
  print(myadd(100, 200, 300))  # 600

  2. 写一个函数，print_odd, 此函数可以传递一个实参，也可以传递两个实参，当传递一个实参时代表结束值
  当传递两个实参时，第一个实参代表起始值，第二个实参代表结束值
     打印出以此区间内的全部奇数，不包含结束数:

  print_odd(10)  # 1 3 5 7 9
  print_odd(11, 20)  # 11 13 15 17 19     



函数形参的定义方式:
  1. 位置形参
   2. 星号元组形参    (arg1,*args)
  3. 命名关键字形参    (*,c, d)
   4. 双星号字典形参   (**kwargs)

位置形参:
  语法:
    def 函数名(形参名1, 形参名2, ...):
        语句块

星号元组形参
  语法:
    def 函数名(*元组形参名):
       语句块
  作用:
    收集多余的位置传参
  说明：
    元组形参名一般命名为"args"
  示例见:
    star_tuple_args.py
def func(*atgs):
  print()

练习:
  写一个函数, mysum可以传入任意个实参的数字,返回所有实参的和

  def mysum(*args):
     ...
  print(mysum(1, 2, 3, 4))  # 10
  print(mysum(10, 20, 30))  # 60




命名关键字形参:
  语法:
    def 函数名(*, 命名关键字形参):  *不用传参
      语句块 
    或
    def 函数名(*args, 命名关键字形参):
      语句块 
  作用:
    强制所有的参数都必须用关键字传参或字典关键字传参

  示例见:
    def fun(*，c, d):
      print("c=", c)
      print("d", d)
    fun (3,4)  #错误
    fun(c=3,d=4)
    def fun2(a, b, *，c, d): # *是位置
      fun2(1, 2, c=3, d=d)
    
    【def fun3(a, b, *args，c, d):
       fun3(11, 22, 33, 44, 55, d=400, c=300)】
      fun3(1, 2, **{'d' : 4, 'c': 3})

双星号字典形参
  语法:
    def 函数名(**字典形参名):
       语句块
  作用:
    收集多余的关键字传参
  说明:
    字典形参名通常命名为'kwargs'
  示例见:
    double_star_dict_args.py


练习:
  写一个函数，mymax类似于 内键的函数max
    详见:
      >>> help(max)
   仿造 max 写一信mymax函数，功能与max完全相同
   (要求不允许调用max函数)
   print(mymax([6, 8, 3, 5]))  # 8
   print(mymax(100, 200))  # 200
   print(mymax(1, 3, 5, 9, 7))  # 9





函数的不定长参数:
  星号元组形参, 双星号字典形参

  [ 说明:
      可以接收任意的位置传参和关键字传参
    示例:
      def fn(*args, **kwargs):
          pass  ]

函数的参数说明:
  位置形参，缺省参数，星号元组形参，双星号字典形参可以混合使用
           (设置参数的默认值)
  函数形参自左至右的顺序为:
    位置形参
    星号元组形参
    命名关键字形参
    双星号字典形参
  示例:          *， c, d
    def fx(a, b, *args, c, **kwargs):
         pass
    fx(100, 200, 300, 400, c="C", d="D", e="E")





思考题:
  查看 >>>help(print)猜想print函数的参数列表 是如何定义的?











练习:
  1. 写一个函数isprime(x) 判断x是否为素数。如果是素数，返回True,否则返回False

  2. 写一个函数prime_m2n(m, n) 返回从m开始，到n结束(不包含n)范围内的素数，返回这些素数的列表并打印
    如:
      L = prime_m2n(5, 10)
      print(L)  [5, 7]

  3. 写一个函数pimes(n) 返回小于n的全部素数的列表,并打印这些素数
    如:
      L = primes(10)
      print(L)  # [2, 3, 5, 7]
    1) 打印100 以内的全部素数
    2) 打印200 以内的全部素数的和
  
  4. 编写函数 fn(n) 此函数返回下列级数的和:
      fn(n) = 1/(1*2) + 1/(2*3) + .... 
      + 1/(n*(n-1)) 的和

    print(fn(100))






