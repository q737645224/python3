day10回顾:
  局部变量   全局变量

  locals()  globals()

  def fa(a, b):
      pass
  一个函数可以作为参数传入另一个函数
      def fx(fn):
          pass
      fx(max) # 传入一个函数
  函数可以作为另一个函数的返回值
  　　　　def fx():
          return max

      m = fx()  # 此函数调用返回一个max函数

      def fy():
          def hello():
              print("hello")
          return hello
      h = fy()
      h()  # 此

    函数嵌套定义

    python 四个作用域:
       局部作用域　
       外部嵌套函数作用域
       全局作用域
       内建模块的作用域

　　　　global  语句
    nonlocal 语句

    def 语句创建函数
    lambda 表达式
       myadd = lambda x, y: x + y

eval(s) 函数
   ... 表达式 ...

exec(s) 函数
   ... 语句(程序) ...

day11笔记:
  函数式编程
  　　函数式编程是指用一系列函数解决问题
  好处:
    1．　用每一个函数完成细小的功能，一系列函数的任意组合可以完成大问题
    2．　函数仅接受输入并产生输入，不包含任何能影响输出的内部状态

  函数的可重入性
    如果一个函数的输入参数一定，则返回结果必须一定的函数称为可重入函数
  示例:
    # 可重入函数，传入参数一定．结果必然一定
    def myadd(x, y):
        return x + y

　　　　# 不可重入函数:
    y = 200
    def myadd2(x):
        return x + y
    print(myadd2(10))  # 210
    y = 300
    print(myadd2(10))  # 310

  函数式编程的要求:
    def 创建的函数最好不要访问局部作用域以外的变量，这样可以保证返回结果的唯一性(可重入性)


高阶函数 High Order Function
  什么是高阶函数:
    满足下列条件之一的即为高阶函数
      1. 函数接受一个或多个函数作为参数传入
      2. 函数返回一个函数

  python内建的高阶函数:
    map, filter, sorted
      详见:
        python_base_docs_html/内建函数(builtins).html

map函数:
  格式:
     map(func, *iterables)
  示例见:
    map.py

练习:
  1. 用map函数求:
    1**3 + 2**3 + 3 ** 3 + .... 9**3 的和

  2. 用map函数求:
    1**4 + 2**4 + 3 ** 4 + .... 20**4 的和

  提示: sum(map(.....)) 

map示例:
  求 1**9 + 2**8 + 3**7 + ...... 9**1

  s = 0
  for x in map(pow, range(1, 10), range(9, 0,-1)):
      s += x
  print(s)


filter 函数:
  filter(function, iterable)

filter示例见:
  filter.py

练习:
  1. 将 1 ～　２０　的偶数用filter生成可迭代对象后将可迭代对象生成的数放入到列表L中

  2. 写一个函数is_prime(x) 判断x是否是素数
    用filter函数打印出: 20 ~ 30之间的全部素数

sorted 函数:
  作用:
    将原可迭代对象的数据进行排序，生成排序后的列表
  格式:
    sorted(iterable, key=None, reverse=False)
  说明:
    iterable 可迭代对象
    key 函数是用来提供一个值，这个值将做为排序的依据
    reverse 标志用来设置是否降序排序
  示例见:
    sorted.py

练习:
  names = ['Tom', 'Jerry', 'Spike', 'Tyke']
  排序的依据为字符串的反序:
           'moT'   yrreJ    ekipS    ekyT
  结果:
    ['Spike', 'Tyke', 'Tom', 'Jerry']




递归函数 recursion
  函数直接或间接的调用自身

递归示例:
  # 函数直接调用自己
  def f():
      f()  # 调用自己
  f()

  # 函数间接的调用自己
  def fa():
      fb()

  def fb():
      fa()

  fa()

递归说明:
  递归一定要控制递归的层数，当符合一定条件时要终止递归
  几乎所有的递归都能用while循环来代替

递归的优缺点:
  优点:
    递归把问题简单化，让思路更为清晰，代码更简洁
  缺点：
  　　递归因系统环境影响大，当递归深度太大时，可能会得到不可预知的结果

递归的两个阶段
  递推阶段: 从原问题出发，按递归公式递推从末知到已经，最终达到递归的终止条件
  回归阶段: 按递归终止条件求出结果,逆向逐步代入递归公式．回归到原问题求解

示例见:
  recursion.py
  recursion_fac.py

练习:
  写函数 mysum(n)用递归方式实现求和
    def mysum(n):
        # 用递归方式求和
        ...

    print(mysum(100))  # 5050
    

思考题:
  已知五位朋友在一起
    第五位朋友比第四位朋友大2岁
    第四位朋友比第三位朋友大2岁
    第三位朋友比第二位朋友大2岁
    第二位朋友比第一位朋友大2岁
    第一位朋友说它10岁


闭包 closure
什么是闭包:
  闭包是指引用了此函数外部的变量的函数

说明:
  在本质上，闭包是将内部嵌套函数和函数外部的执行环境绑定在一起的对象

闭包必须满足三个条件:
  1. 必须有一个内嵌函数
  2. 内嵌函数必须引用外部函数中的变量
  3. 外部函数返回值必须是内嵌函数

示例见:
  closure.py

  # 闭包的应用见:
  closure2.py

练习：
  1.　已知五位朋友在一起
    第五位朋友比第四位朋友大2岁
    第四位朋友比第三位朋友大2岁
    第三位朋友比第二位朋友大2岁
    第二位朋友比第一位朋友大2岁
    第一位朋友说它10岁
    写程序打印出第五位朋友　和第三位朋友　的年龄
　　2. 已知有列表:
    L = [[3, 5, 8], 10, [[13, 14], 15, 18], 20]
    1) 写一个函数print_list(lst) 打印出所有元素
      print(L)  # 打印 3 5 8 10 13 14 ....
    2) 写一个函数sum_list(lst) 返回这个列表中所有元素的和
      print(sum_list(L))  # 86
    注:
      type(x) 可以返回一个变量的类型
      如:
         >>> type(20) is int # True
         >>> type([1, 2, 3]) is list # True

  3. 改写之前的学生信息管理程序
  　　要求添加四个功能:
      | 5) 按学生成绩高-低显示学生信息　|
      | 6) 按学生成绩低-高显示学生信息　|
      | 7) 按学生年龄高-低显示学生信息　|
      | 8) 按学生年龄低-高显示学生信息　|







