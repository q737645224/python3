day07回顾:
  元组 tuple
    元组是不可变的序列容器
  序列的运算：
    + *  += *=
    < <= > >= == !=
    in , not in
    索引和切片

  字典 dict
    键-值(key-value)对

    键不能重复，且只能用不可变类型做为字典的键
      字典[键] = 值  # 添加和修改键-值对  
      del 字典[键]
    {1: 100, 2: 200}

  字典的运算
    键索引
      字典[键] = value
      var = 字典[键]
    in , not in 

  字典推导式
    {键表达式: 值表达式 for 变量 in 可迭代对象 if 真值表达式 for 变量2 in  可迭代对象 .... }
  
  字典的列表的区别:





day08笔记
集合 set
  集合的是可变的容器
  集合内的数据对象都是唯一的(不能重复多次的)
  集合是无序的存储结构，集合中的数据没有先后关系
  集合内的元素必须是不可变对象
  集合是可迭代对象
  集合是相当于只有键没有值的字典(键则是集合的数据)

创建空集合
  s = set()

创建非空集合
  s = {1, 2, 3}
  s = {3.14, True, (1970,1,1), "hello"}

集合的构造函数 set
  set()  创建一个空的集合对象(不能用{}创建空集合)
  set(iterable)  用可迭代对象创建一个新的集合对象
示例:
  s = {1, 3, 5, 7}
  s = set("ABC")
  s = set("ABCCBA")
  s = set({1:'1', 2:'2', 5:'5'})
  s = set([1, 0, 3.14, "hello"])
  s = set(('abc', '123', True))

集合的运算:
   交集，并集，补集，子集，超集

& 生成两个集合的交集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 & s2  # s3 = {2, 3}

|  生成两个集合的并集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 | s2  # s3 = {1, 2, 3, 4}

- 生成两个集合的补集 
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 - s2  # 生成属于s1但不属于s2的所有元 素的集合

^ 生成两个集合的对称补集
  s1 = {1, 2,i 3}
  s2 = {2, 3, 4}
  s3 = s1 ^ s2  # (s1 - s2) | (s2 - s1)
                # {1, 4}

> 判断一个集合是另一个集合的超集
< 判断一个集合是另一个集合的子集
  s1 = {1, 2, 3}
  s2 = {2, 3}
  s1 > s2  # True  s1 为 s2的超集
  s1 < s2  # False  s2 为 s1的子集

== != 集合相同/不同  
  s1 = {1, 2, 3}
  s2 = {3, 2, 1}
  s1 == s2  # 


in , not in 运算符
  等同于字典in,not in,
  作于集合中，判断某个值是否存在于集合中

集合和字典的优点:
  in / not in运算符的判断速度快些

能用于集合的函数:
  len(x), max(x), min(x), sum(x), any(x), all(x)

集合练习:
  经理有: 曹操,刘备,孙权
  技术员有: 曹操,孙权,张飞,关羽
  用集合求:
    1) 即是经理，也是技术员的有谁?
    2) 是经理，但不是技术员的人员都有谁？
    3) 是技术员，不是经理的都有谁
    4) 张飞是经理吗？
    5) 身兼一职的人都有谁？
    6) 经理和技术员共有几个人?





python3 中常用的集合方法:
  文档参见:
    python_base_docs_html/set.html

集合推导式
  集合推导式是用可迭代对象生成集合的表达式

  语法:
    {表达式 for 变量 in 可迭代对象 [if 真值表达式]}

    注: [] 括号部分可以省略
  
  示例:
    L = [1, 3, 5, 7, 2, 4, 6, 8, 1, 3, 5]
    s = {x for x in L}

集合推导式可以嵌套:
   语法同列表推导式一致!


练习:
  任意输入一些数字，存于列表L中。当输入负数时结束输入
  1) 打印这些数的和 
  2) 打印这些数有多少种(去重)
  3) 除重复的数字后，打印这些剩余数字的和

  提示,可以用集合去重!!!!


固定集合 frozenset
  固定集合是不可变的，无序的， 含有唯一元素的集合
  作用:
    固定集合可以作为字典的键，还可以作为集合的值

  固定集合的构造函数:(只能用构造函数创建固定集合)
    frozenset()  创建一个空的固定集合
    frozenset(iterable)  用可迭代对象创建固定集合
  示例:
    f = frozenset()   # 空固定集合
    f = frozenset([1, 3, 5, 7])  # f = frozenset({1, 3, 5, 7})

固定集合的运算:
  & 交集， | 并集,  - 补集, ^ 对称补集 
  < <= > >= == !=
  in / not in 
  (以上运算符和 集合 set中的用法完全一致)

固定集合的方法：
  相当于集合的全部方法去掉  修改集合 的方法



阶段性总结：
1. 数据类型:
    数值类型：
    int, float, complex, bool
    容器:
    不可变的容器
      str, tuple, frozenset, bytes(字节串)
    可变的容器
      list, dict, set, bytearray(字节数组)
2.值:
    None, False, True

3. 运算符
  算术运算符
    + - * /  //  %  **
  比较运算符:
    < <= > >=  !=  ==   比较值
  in / not in 
  is, is not 是不是同一个对象，比较ID
  布尔运算:
    not, and, or
  +(正号) -(负号)
  &(交集) |(并集)  ^(对称补集) 
  [] (索引,切片,键索引)


4.表达式:[x= , if ..., while..., for ]
  100
  100 + 200
  max(1,2,3)  # 函数调用是表达式
  x if x > y else y, 条件表达式 

  三种推导式:
    列表，字典，集合推导式(三种)
    [表达式 for x in 可迭代对象]
    {x : y for x, y in 可迭代对象 if  真值表达式 if ...}
    {x for x in 可迭代对象 if 真值表达式}

语句
  表达式语句:(表达式都可以形成语句)
    所有的表达式都可以单独写在一行，形成一个语句,例:
      print("hello world")
      1 + 2
  赋值语句:(只有赋值语句才能创建变量)
    a = 100
    a = b = c = 100   #a, b = b , a
    x, y = 100, 200
    a[0] = 100    #列表[整数表达式] = 表达式
    dict['name'] = 'tarena'   字典[键] = 表达式
  del 语句
  if 语句
  while 语句
  for 语句
  break 语句
  continue语句
  pass 语句


内建函数:

  len(x), max(x), min(x), sum(x), any(x), all(x)
  构造函数(用来创建同类型的数据对象)
    bool(x), int(x), float(x), complex(x),
    str(x), list(x), tuple(x), dict(x), set(x),
    frozenset(x)
  abs(x)  绝对值
  round(x) 四舍五入
  pow(x, y, z=None)  幂运算

  bin(x), oct(x), hex(x)
  chr(x), ord(x)
  range(start, stop, step)
  input(x), print(x)
genatator   (x for x in range(n))
  >>> help(__builtins__)
 




函数 function
  什么是函数:
    函数是可以重复执行的语句块，可以重复调用
  作用:
    1. 用 于封装语句块，提高代码的重用性
    2. 定义用户级别的函数

  语法:
    def 函数名(形参列表):
        语句块
  说明:
    1. 函数的名字就是语句块的名称
    2. 函数名的命名规则与变量名相同（函数名必须是标识符）
    3. 函数名是一个变量(不要轻易对其赋值)
    4.【函数有自己的名字空间，在函数外部不可以访问函数内部的变量，在函数内可以访问函数外部的变量,但不能修改此变量.
    
    5. 函数如果不需要传入参数，形参列表可以为空
    6. 语句部分不能为空，如果为空需要填充pass
  示例见:
    function.py

函数调用
  函数名(实际调用传递参数)
    注:实际调用传递参数，以后简称实参

  说明:
    1. 函数调用是一个表达式
    2. 如果函数内部没有return语句，函数调用完毕后返回None对象
    3. 如果函数需要返回其它的对象需要用到 return 语句

练习：
  1. 写一个函数myadd, 此函数中的参数列表里有两个参数x, y
    此函数的功能是打印 x + y 的和

    def myadd(....):
        ....  # 注: .... 部是是我们要填写代码的地方

    myadd(100, 200)  # 300
    print("ABC", "123")  # ABC123

  2. 写一个函数 mysum, 传入一个参数x代表终止整数，
     打印出 1 + 2 + 3 + 4 + ..... + x的和
    def mysum(x):
        ....

    mysum(100)  # 5050
    mysum(4)   # 10
3.写一个函数print_even,传入一个参数n代表终止整数，打印2 4 6 8 ...n之间的所有偶数
  打印定义如下：
    def print even(n):
         ....
    调试调用：
        print_even(8)





return 语句
  语法:
    return [表达式]
    注: []  代表可省略
  作用:
    用于函数中，结束当前函数的执行，返回到调用该函数的地方，同时返回一个对象的引用关系

  return 语句说明
    1. return 语句后跟的表达式可以省略，省略后相 当于return None
    2. 如果函数内没有return 语句，则函数执行完最后一条语句后返回None(相当于在最后加了一条return None语句)
  示例见:
    return.py


练习:
  1. 写一个函数 mymax, 给函数传递两个参数，返回两个实参中最大的一个
    def mymax(a, b):
         ....

    v = mymax(100, 200)
    print('v =', v)  # v = 200
    print(mymax('ABC', 'abc'))  # abc

  2. 写一个函数 input_number
      def input_number():
          ....

      此函数用来获取用户循环输入的整数，当用户输入负数时结束输入。将用户输入的数字以列表的形式返回，再用内建函数max, min, sum取出户输入的最大值，最小值及和

      L = input_number()
      print(L)  # 打印此列表
      print("用户输入的最大数是:", max(L))
      print("用户输入的最小数是:", min(L))
      print("用户输入的数的和是:", sum(L))


练习:
   1. 写一个函数 print_odd, 打印从begin开始，到end结束(不包含end)内的全部的奇数
      def print_odd(begin, end):
          ....

      print_odd(1, 10)  # 打印 1 3 5 7 9d
      ptint_odd(10, 20) # 打印 11 13 15 17 19

   2. 定义两个函数:
      sum3(a, b, c) 用于返回三个数的和
      pow3(x)  用于返回x的三次方
      用以上函数计算:
        1. 计算1的立方 + 2的立方 + 3的立方的和
          即:  1**3 + 2**3 + 3**3的和 
        2. 计算1 + 2 + 3 的和的立方,
          即:(1+2+3)**3
编写函数fun，其功能是：计算并返回下载多项式的值
sn = 1 + 1/2 +1/3 + 1/4 +.... + 1/n
函数如下：
    def fun(n):
      ...
    print(fun(3)) #1.83333333333
    print(fun(10))


  1.写一个函数 get_chinese_char_count(x)， 此函数实现的功能是从一个给定的字符串中返回中文字符的个数
    def get_chinese_char_count(x):
        ...


    s = input("请输入中英文混合的字符串：")   #hello中国
    print('你输入的中文的字符个数是：')
    get_chinese_char_count(s)  #2

2.写一个函数isprime(x)
  判断x是否为素数，如果为素数，返回true，否则返回False
    如：
     print(isprime(5)) #true
     print(isprime(6)) #False
3.写一个函数prime_m2n(m,n)返回从m开始，到n结束范围内的素数，返回这些素数的列表，并打印。
  如：
    L = prime_m2n(10,20)
    print(L) #[11,13,17,19]
4.写一个函数primes(n) 返回指定范围内n(不包括n)的全部素数的列表，并打印这些列表
  如：
    L = primes(10)
    print(L) #[2,3,5,7]
    1)打印100以内全部素数的和
    2）打印200以内全部素数的和
  
 5. 改写之前的学生信息管理程序
     改为两个函数:
       1. 写一个函数 input_student() 用于返回学生信息的字典的列表(以前格式一样)
       2. 写一个函数 output_student(lst)
         此函数传入一个列表lst,即字典的列表
         此函数把lst的内容以表格形式打印出来
      def input_student():
           ....

      def output_student(lst):
           ...

      L = input_student()  # 获取学生信息的列表
      output_student(L)  # 用于将传入的列表打印成表格
      测试代码：
        L = input_student()
        print(L)
        putput_student(L) #打印表格





